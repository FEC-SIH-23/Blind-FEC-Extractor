# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations

"""
This file contains the exact signatures for all functions in module
PySide6.QtQml, except for defaults which are replaced by "...".
"""

# Module `PySide6.QtQml`

import PySide6.QtQml
import PySide6.QtCore
import PySide6.QtNetwork

import os
import enum
from typing import Any, Callable, ClassVar, Dict, List, Optional, Sequence, Tuple, Union, overload
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


NoneType = type(None)


class ListProperty(PySide6.QtCore.Property):

    def __init__(self, type: type, append: Callable, at: Optional[Callable] = ..., clear: Optional[Callable] = ..., count: Optional[Callable] = ...) -> None: ...


class QIntList(object): ...


class QJSEngine(PySide6.QtCore.QObject):

    uiLanguageChanged        : ClassVar[Signal] = ... # uiLanguageChanged()

    class Extension(enum.Flag):

        TranslationExtension     : QJSEngine.Extension = ... # 0x1
        ConsoleExtension         : QJSEngine.Extension = ... # 0x2
        GarbageCollectionExtension: QJSEngine.Extension = ... # 0x4
        AllExtensions            : QJSEngine.Extension = ... # 0xffffffff

    class ObjectOwnership(enum.Enum):

        CppOwnership             : QJSEngine.ObjectOwnership = ... # 0x0
        JavaScriptOwnership      : QJSEngine.ObjectOwnership = ... # 0x1


    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, parent: PySide6.QtCore.QObject) -> None: ...

    def catchError(self) -> PySide6.QtQml.QJSValue: ...
    def collectGarbage(self) -> None: ...
    def evaluate(self, program: str, fileName: str = ..., lineNumber: int = ...) -> Tuple[PySide6.QtQml.QJSValue, List[str]]: ...
    def globalObject(self) -> PySide6.QtQml.QJSValue: ...
    def hasError(self) -> bool: ...
    def importModule(self, fileName: str) -> PySide6.QtQml.QJSValue: ...
    def installExtensions(self, extensions: PySide6.QtQml.QJSEngine.Extension, object: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int] = ...) -> None: ...
    def isInterrupted(self) -> bool: ...
    def newArray(self, length: int = ...) -> PySide6.QtQml.QJSValue: ...
    def newErrorObject(self, errorType: PySide6.QtQml.QJSValue.ErrorType, message: str = ...) -> PySide6.QtQml.QJSValue: ...
    def newObject(self) -> PySide6.QtQml.QJSValue: ...
    def newQMetaObject(self, metaObject: PySide6.QtCore.QMetaObject) -> PySide6.QtQml.QJSValue: ...
    def newQObject(self, object: PySide6.QtCore.QObject) -> PySide6.QtQml.QJSValue: ...
    def newSymbol(self, name: str) -> PySide6.QtQml.QJSValue: ...
    @staticmethod
    def objectOwnership(arg__1: PySide6.QtCore.QObject) -> PySide6.QtQml.QJSEngine.ObjectOwnership: ...
    def registerModule(self, moduleName: str, value: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -> bool: ...
    def setInterrupted(self, interrupted: bool) -> None: ...
    @staticmethod
    def setObjectOwnership(arg__1: PySide6.QtCore.QObject, arg__2: PySide6.QtQml.QJSEngine.ObjectOwnership) -> None: ...
    def setUiLanguage(self, language: str) -> None: ...
    @overload
    def throwError(self, error: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -> None: ...
    @overload
    def throwError(self, errorType: PySide6.QtQml.QJSValue.ErrorType, message: str = ...) -> None: ...
    @overload
    def throwError(self, message: str) -> None: ...
    def toScriptValue(self, arg__1: Any) -> PySide6.QtQml.QJSValue: ...
    def uiLanguage(self) -> str: ...


class QJSManagedValue(Shiboken.Object):

    class Type(enum.Enum):

        Undefined                : QJSManagedValue.Type = ... # 0x0
        Boolean                  : QJSManagedValue.Type = ... # 0x1
        Number                   : QJSManagedValue.Type = ... # 0x2
        String                   : QJSManagedValue.Type = ... # 0x3
        Object                   : QJSManagedValue.Type = ... # 0x4
        Symbol                   : QJSManagedValue.Type = ... # 0x5
        Function                 : QJSManagedValue.Type = ... # 0x6


    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, string: str, engine: PySide6.QtQml.QJSEngine) -> None: ...
    @overload
    def __init__(self, value: Union[PySide6.QtQml.QJSPrimitiveValue, str, bool, float, int], engine: PySide6.QtQml.QJSEngine) -> None: ...
    @overload
    def __init__(self, value: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int], engine: PySide6.QtQml.QJSEngine) -> None: ...
    @overload
    def __init__(self, variant: Any, engine: PySide6.QtQml.QJSEngine) -> None: ...

    def call(self, arguments: Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSValue: ...
    def callAsConstructor(self, arguments: Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSValue: ...
    def callWithInstance(self, instance: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int], arguments: Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSValue: ...
    @overload
    def deleteProperty(self, arrayIndex: int) -> bool: ...
    @overload
    def deleteProperty(self, name: str) -> bool: ...
    def engine(self) -> PySide6.QtQml.QJSEngine: ...
    def equals(self, other: PySide6.QtQml.QJSManagedValue) -> bool: ...
    @overload
    def hasOwnProperty(self, arrayIndex: int) -> bool: ...
    @overload
    def hasOwnProperty(self, name: str) -> bool: ...
    @overload
    def hasProperty(self, arrayIndex: int) -> bool: ...
    @overload
    def hasProperty(self, name: str) -> bool: ...
    def isArray(self) -> bool: ...
    def isBoolean(self) -> bool: ...
    def isDate(self) -> bool: ...
    def isError(self) -> bool: ...
    def isFunction(self) -> bool: ...
    def isInteger(self) -> bool: ...
    def isJsMetaType(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isNumber(self) -> bool: ...
    def isObject(self) -> bool: ...
    def isQMetaObject(self) -> bool: ...
    def isQObject(self) -> bool: ...
    def isRegularExpression(self) -> bool: ...
    def isString(self) -> bool: ...
    def isSymbol(self) -> bool: ...
    def isUndefined(self) -> bool: ...
    def isUrl(self) -> bool: ...
    def isVariant(self) -> bool: ...
    def jsMetaInstantiate(self, values: Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSManagedValue: ...
    def jsMetaMembers(self) -> List[str]: ...
    def jsMetaType(self) -> PySide6.QtQml.QJSManagedValue: ...
    @overload
    def property(self, arrayIndex: int) -> PySide6.QtQml.QJSValue: ...
    @overload
    def property(self, name: str) -> PySide6.QtQml.QJSValue: ...
    def prototype(self) -> PySide6.QtQml.QJSManagedValue: ...
    @overload
    def setProperty(self, arrayIndex: int, value: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -> None: ...
    @overload
    def setProperty(self, name: str, value: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -> None: ...
    def setPrototype(self, prototype: PySide6.QtQml.QJSManagedValue) -> None: ...
    def strictlyEquals(self, other: PySide6.QtQml.QJSManagedValue) -> bool: ...
    def toBoolean(self) -> bool: ...
    def toDateTime(self) -> PySide6.QtCore.QDateTime: ...
    def toInteger(self) -> int: ...
    def toJSValue(self) -> PySide6.QtQml.QJSValue: ...
    def toNumber(self) -> float: ...
    def toPrimitive(self) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def toQMetaObject(self) -> PySide6.QtCore.QMetaObject: ...
    def toQObject(self) -> PySide6.QtCore.QObject: ...
    def toRegularExpression(self) -> PySide6.QtCore.QRegularExpression: ...
    def toString(self) -> str: ...
    def toUrl(self) -> PySide6.QtCore.QUrl: ...
    def toVariant(self) -> Any: ...
    def type(self) -> PySide6.QtQml.QJSManagedValue.Type: ...


class QJSPrimitiveValue(Shiboken.Object):

    class Type(enum.Enum):

        Undefined                : QJSPrimitiveValue.Type = ... # 0x0
        Null                     : QJSPrimitiveValue.Type = ... # 0x1
        Boolean                  : QJSPrimitiveValue.Type = ... # 0x2
        Integer                  : QJSPrimitiveValue.Type = ... # 0x3
        Double                   : QJSPrimitiveValue.Type = ... # 0x4
        String                   : QJSPrimitiveValue.Type = ... # 0x5


    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, string: str) -> None: ...
    @overload
    def __init__(self, type: Union[PySide6.QtCore.QMetaType, PySide6.QtCore.QMetaType.Type]) -> None: ...
    @overload
    def __init__(self, type: Union[PySide6.QtCore.QMetaType, PySide6.QtCore.QMetaType.Type], value: int) -> None: ...
    @overload
    def __init__(self, value: bool) -> None: ...
    @overload
    def __init__(self, value: float) -> None: ...
    @overload
    def __init__(self, value: int) -> None: ...
    @overload
    def __init__(self, variant: Any) -> None: ...

    def __add__(self, rhs: Union[PySide6.QtQml.QJSPrimitiveValue, str, bool, float, int]) -> PySide6.QtQml.QJSPrimitiveValue: ...
    @staticmethod
    def __copy__() -> None: ...
    def __iadd__(self, arg__1: int) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def __isub__(self, arg__1: int) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def __mod__(self, rhs: Union[PySide6.QtQml.QJSPrimitiveValue, str, bool, float, int]) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def __mul__(self, rhs: Union[PySide6.QtQml.QJSPrimitiveValue, str, bool, float, int]) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def __neg__(self) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def __pos__(self) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def __sub__(self, rhs: Union[PySide6.QtQml.QJSPrimitiveValue, str, bool, float, int]) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def constData(self) -> int: ...
    def data(self) -> int: ...
    def equals(self, other: Union[PySide6.QtQml.QJSPrimitiveValue, str, bool, float, int]) -> bool: ...
    def metaType(self) -> PySide6.QtCore.QMetaType: ...
    def strictlyEquals(self, other: Union[PySide6.QtQml.QJSPrimitiveValue, str, bool, float, int]) -> bool: ...
    def toBoolean(self) -> bool: ...
    def toDouble(self) -> float: ...
    def toInteger(self) -> int: ...
    def toString(self) -> str: ...
    def toVariant(self) -> Any: ...
    def type(self) -> PySide6.QtQml.QJSPrimitiveValue.Type: ...


class QJSValue(Shiboken.Object):

    class ErrorType(enum.Enum):

        NoError                  : QJSValue.ErrorType = ... # 0x0
        GenericError             : QJSValue.ErrorType = ... # 0x1
        EvalError                : QJSValue.ErrorType = ... # 0x2
        RangeError               : QJSValue.ErrorType = ... # 0x3
        ReferenceError           : QJSValue.ErrorType = ... # 0x4
        SyntaxError              : QJSValue.ErrorType = ... # 0x5
        TypeError                : QJSValue.ErrorType = ... # 0x6
        URIError                 : QJSValue.ErrorType = ... # 0x7

    class ObjectConversionBehavior(enum.Enum):

        ConvertJSObjects         : QJSValue.ObjectConversionBehavior = ... # 0x0
        RetainJSObjects          : QJSValue.ObjectConversionBehavior = ... # 0x1

    class SpecialValue(enum.Enum):

        NullValue                : QJSValue.SpecialValue = ... # 0x0
        UndefinedValue           : QJSValue.SpecialValue = ... # 0x1


    @overload
    def __init__(self, other: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -> None: ...
    @overload
    def __init__(self, str: bytes) -> None: ...
    @overload
    def __init__(self, value: PySide6.QtQml.QJSValue.SpecialValue = ...) -> None: ...
    @overload
    def __init__(self, value: str) -> None: ...
    @overload
    def __init__(self, value: bool) -> None: ...
    @overload
    def __init__(self, value: float) -> None: ...
    @overload
    def __init__(self, value: int) -> None: ...
    @overload
    def __init__(self, value: int) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def __lshift__(self, arg__1: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream: ...
    def __rshift__(self, arg__1: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream: ...
    def call(self, args: Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSValue: ...
    def callAsConstructor(self, args: Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSValue: ...
    def callWithInstance(self, instance: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int], args: Sequence[PySide6.QtQml.QJSValue] = ...) -> PySide6.QtQml.QJSValue: ...
    def deleteProperty(self, name: str) -> bool: ...
    def equals(self, other: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -> bool: ...
    def errorType(self) -> PySide6.QtQml.QJSValue.ErrorType: ...
    def hasOwnProperty(self, name: str) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isArray(self) -> bool: ...
    def isBool(self) -> bool: ...
    def isCallable(self) -> bool: ...
    def isDate(self) -> bool: ...
    def isError(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isNumber(self) -> bool: ...
    def isObject(self) -> bool: ...
    def isQMetaObject(self) -> bool: ...
    def isQObject(self) -> bool: ...
    def isRegExp(self) -> bool: ...
    def isString(self) -> bool: ...
    def isUndefined(self) -> bool: ...
    def isUrl(self) -> bool: ...
    def isVariant(self) -> bool: ...
    @overload
    def property(self, arrayIndex: int) -> PySide6.QtQml.QJSValue: ...
    @overload
    def property(self, name: str) -> PySide6.QtQml.QJSValue: ...
    def prototype(self) -> PySide6.QtQml.QJSValue: ...
    @overload
    def setProperty(self, arrayIndex: int, value: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -> None: ...
    @overload
    def setProperty(self, name: str, value: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -> None: ...
    def setPrototype(self, prototype: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -> None: ...
    def strictlyEquals(self, other: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -> bool: ...
    def toBool(self) -> bool: ...
    def toDateTime(self) -> PySide6.QtCore.QDateTime: ...
    def toInt(self) -> int: ...
    def toNumber(self) -> float: ...
    def toPrimitive(self) -> PySide6.QtQml.QJSPrimitiveValue: ...
    def toQMetaObject(self) -> PySide6.QtCore.QMetaObject: ...
    def toQObject(self) -> PySide6.QtCore.QObject: ...
    def toString(self) -> str: ...
    def toUInt(self) -> int: ...
    @overload
    def toVariant(self) -> Any: ...
    @overload
    def toVariant(self, behavior: PySide6.QtQml.QJSValue.ObjectConversionBehavior) -> Any: ...


class QJSValueIterator(Shiboken.Object):

    def __init__(self, value: Union[PySide6.QtQml.QJSValue, PySide6.QtQml.QJSValue.SpecialValue, bool, str, bytes, float, int]) -> None: ...

    def hasNext(self) -> bool: ...
    def name(self) -> str: ...
    def next(self) -> bool: ...
    def value(self) -> PySide6.QtQml.QJSValue: ...


class QPyQmlParserStatus(PySide6.QtCore.QObject, PySide6.QtQml.QQmlParserStatus):

    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...


class QPyQmlPropertyValueSource(PySide6.QtCore.QObject, PySide6.QtQml.QQmlPropertyValueSource):

    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...


class QQmlAbstractUrlInterceptor(Shiboken.Object):

    class DataType(enum.Enum):

        QmlFile                  : QQmlAbstractUrlInterceptor.DataType = ... # 0x0
        JavaScriptFile           : QQmlAbstractUrlInterceptor.DataType = ... # 0x1
        QmldirFile               : QQmlAbstractUrlInterceptor.DataType = ... # 0x2
        UrlString                : QQmlAbstractUrlInterceptor.DataType = ... # 0x1000


    def __init__(self) -> None: ...

    def intercept(self, path: Union[PySide6.QtCore.QUrl, str], type: PySide6.QtQml.QQmlAbstractUrlInterceptor.DataType) -> PySide6.QtCore.QUrl: ...


class QQmlApplicationEngine(PySide6.QtQml.QQmlEngine):

    objectCreated            : ClassVar[Signal] = ... # objectCreated(QObject*,QUrl)
    objectCreationFailed     : ClassVar[Signal] = ... # objectCreationFailed(QUrl)

    @overload
    def __init__(self, filePath: str, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, uri: str, typeName: str, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, url: Union[PySide6.QtCore.QUrl, str], parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...

    @overload
    def load(self, filePath: Union[str, bytes, os.PathLike]) -> None: ...
    @overload
    def load(self, url: Union[PySide6.QtCore.QUrl, str]) -> None: ...
    def loadData(self, data: Union[PySide6.QtCore.QByteArray, bytes], url: Union[PySide6.QtCore.QUrl, str] = ...) -> None: ...
    def loadFromModule(self, uri: str, typeName: str) -> None: ...
    def rootObjects(self) -> List[PySide6.QtCore.QObject]: ...
    def setExtraFileSelectors(self, extraFileSelectors: Sequence[str]) -> None: ...
    def setInitialProperties(self, initialProperties: Dict[str, Any]) -> None: ...


class QQmlComponent(PySide6.QtCore.QObject):

    progressChanged          : ClassVar[Signal] = ... # progressChanged(double)
    statusChanged            : ClassVar[Signal] = ... # statusChanged(QQmlComponent::Status)

    class CompilationMode(enum.Enum):

        PreferSynchronous        : QQmlComponent.CompilationMode = ... # 0x0
        Asynchronous             : QQmlComponent.CompilationMode = ... # 0x1

    class Status(enum.Enum):

        Null                     : QQmlComponent.Status = ... # 0x0
        Ready                    : QQmlComponent.Status = ... # 0x1
        Loading                  : QQmlComponent.Status = ... # 0x2
        Error                    : QQmlComponent.Status = ... # 0x3


    @overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlEngine, fileName: str, mode: PySide6.QtQml.QQmlComponent.CompilationMode, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlEngine, fileName: str, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlEngine, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlEngine, url: Union[PySide6.QtCore.QUrl, str], mode: PySide6.QtQml.QQmlComponent.CompilationMode, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlEngine, url: Union[PySide6.QtCore.QUrl, str], parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, engine: PySide6.QtQml.QQmlEngine, uri: str, typeName: str, mode: PySide6.QtQml.QQmlComponent.CompilationMode, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, engine: PySide6.QtQml.QQmlEngine, uri: str, typeName: str, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...

    def beginCreate(self, arg__1: PySide6.QtQml.QQmlContext) -> PySide6.QtCore.QObject: ...
    def completeCreate(self) -> None: ...
    @overload
    def create(self, arg__1: PySide6.QtQml.QQmlIncubator, context: Optional[PySide6.QtQml.QQmlContext] = ..., forContext: Optional[PySide6.QtQml.QQmlContext] = ...) -> None: ...
    @overload
    def create(self, context: Optional[PySide6.QtQml.QQmlContext] = ...) -> PySide6.QtCore.QObject: ...
    def createObject(self, parent: Optional[PySide6.QtCore.QObject] = ..., properties: Dict[str, Any] = ...) -> PySide6.QtCore.QObject: ...
    def createWithInitialProperties(self, initialProperties: Dict[str, Any], context: Optional[PySide6.QtQml.QQmlContext] = ...) -> PySide6.QtCore.QObject: ...
    def creationContext(self) -> PySide6.QtQml.QQmlContext: ...
    def engine(self) -> PySide6.QtQml.QQmlEngine: ...
    def errorString(self) -> str: ...
    def errors(self) -> List[PySide6.QtQml.QQmlError]: ...
    def isBound(self) -> bool: ...
    def isError(self) -> bool: ...
    def isLoading(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isReady(self) -> bool: ...
    def loadFromModule(self, uri: str, typeName: str, mode: PySide6.QtQml.QQmlComponent.CompilationMode = ...) -> None: ...
    @overload
    def loadUrl(self, url: Union[PySide6.QtCore.QUrl, str]) -> None: ...
    @overload
    def loadUrl(self, url: Union[PySide6.QtCore.QUrl, str], mode: PySide6.QtQml.QQmlComponent.CompilationMode) -> None: ...
    def progress(self) -> float: ...
    def setData(self, arg__1: Union[PySide6.QtCore.QByteArray, bytes], baseUrl: Union[PySide6.QtCore.QUrl, str]) -> None: ...
    def setInitialProperties(self, component: PySide6.QtCore.QObject, properties: Dict[str, Any]) -> None: ...
    def status(self) -> PySide6.QtQml.QQmlComponent.Status: ...
    def url(self) -> PySide6.QtCore.QUrl: ...


class QQmlContext(PySide6.QtCore.QObject):

    class PropertyPair(Shiboken.Object):

        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, PropertyPair: PySide6.QtQml.QQmlContext.PropertyPair) -> None: ...

        @staticmethod
        def __copy__() -> None: ...


    @overload
    def __init__(self, parent: PySide6.QtQml.QQmlContext, objParent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, parent: PySide6.QtQml.QQmlEngine, objParent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...

    def baseUrl(self) -> PySide6.QtCore.QUrl: ...
    def contextObject(self) -> PySide6.QtCore.QObject: ...
    def contextProperty(self, arg__1: str) -> Any: ...
    def engine(self) -> PySide6.QtQml.QQmlEngine: ...
    def importedScript(self, name: str) -> PySide6.QtQml.QJSValue: ...
    def isValid(self) -> bool: ...
    def nameForObject(self, arg__1: PySide6.QtCore.QObject) -> str: ...
    def objectForName(self, arg__1: str) -> PySide6.QtCore.QObject: ...
    def parentContext(self) -> PySide6.QtQml.QQmlContext: ...
    def resolvedUrl(self, arg__1: Union[PySide6.QtCore.QUrl, str]) -> PySide6.QtCore.QUrl: ...
    def setBaseUrl(self, arg__1: Union[PySide6.QtCore.QUrl, str]) -> None: ...
    def setContextObject(self, arg__1: PySide6.QtCore.QObject) -> None: ...
    def setContextProperties(self, properties: Sequence[PySide6.QtQml.QQmlContext.PropertyPair]) -> None: ...
    @overload
    def setContextProperty(self, arg__1: str, arg__2: PySide6.QtCore.QObject) -> None: ...
    @overload
    def setContextProperty(self, arg__1: str, arg__2: Any) -> None: ...


class QQmlDebuggingEnabler(Shiboken.Object):

    class StartMode(enum.Enum):

        DoNotWaitForClient       : QQmlDebuggingEnabler.StartMode = ... # 0x0
        WaitForClient            : QQmlDebuggingEnabler.StartMode = ... # 0x1


    def __init__(self, printWarning: bool = ...) -> None: ...

    @staticmethod
    def connectToLocalDebugger(socketFileName: str, mode: PySide6.QtQml.QQmlDebuggingEnabler.StartMode = ...) -> bool: ...
    @staticmethod
    def debuggerServices() -> List[str]: ...
    @staticmethod
    def enableDebugging(printWarning: bool) -> None: ...
    @staticmethod
    def inspectorServices() -> List[str]: ...
    @staticmethod
    def nativeDebuggerServices() -> List[str]: ...
    @staticmethod
    def profilerServices() -> List[str]: ...
    @staticmethod
    def setServices(services: Sequence[str]) -> None: ...
    @staticmethod
    def startDebugConnector(pluginName: str, configuration: Dict[str, Any] = ...) -> bool: ...
    @staticmethod
    def startTcpDebugServer(port: int, mode: PySide6.QtQml.QQmlDebuggingEnabler.StartMode = ..., hostName: str = ...) -> bool: ...


class QQmlEngine(PySide6.QtQml.QJSEngine):

    exit                     : ClassVar[Signal] = ... # exit(int)
    offlineStoragePathChanged: ClassVar[Signal] = ... # offlineStoragePathChanged()
    quit                     : ClassVar[Signal] = ... # quit()
    warnings                 : ClassVar[Signal] = ... # warnings(QList<QQmlError>)

    def __init__(self, p: Optional[PySide6.QtCore.QObject] = ...) -> None: ...

    def addImageProvider(self, id: str, arg__2: PySide6.QtQml.QQmlImageProviderBase) -> None: ...
    def addImportPath(self, dir: Union[str, bytes, os.PathLike]) -> None: ...
    def addNamedBundle(self, arg__1: str, arg__2: str) -> bool: ...
    def addPluginPath(self, dir: Union[str, bytes, os.PathLike]) -> None: ...
    def addUrlInterceptor(self, urlInterceptor: PySide6.QtQml.QQmlAbstractUrlInterceptor) -> None: ...
    def baseUrl(self) -> PySide6.QtCore.QUrl: ...
    def captureProperty(self, object: PySide6.QtCore.QObject, property: PySide6.QtCore.QMetaProperty) -> None: ...
    def clearComponentCache(self) -> None: ...
    def clearSingletons(self) -> None: ...
    @staticmethod
    def contextForObject(arg__1: PySide6.QtCore.QObject) -> PySide6.QtQml.QQmlContext: ...
    def event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...
    def imageProvider(self, id: str) -> PySide6.QtQml.QQmlImageProviderBase: ...
    def importPathList(self) -> List[str]: ...
    def importPlugin(self, filePath: str, uri: str, errors: Sequence[PySide6.QtQml.QQmlError]) -> bool: ...
    def incubationController(self) -> PySide6.QtQml.QQmlIncubationController: ...
    def interceptUrl(self, url: Union[PySide6.QtCore.QUrl, str], type: PySide6.QtQml.QQmlAbstractUrlInterceptor.DataType) -> PySide6.QtCore.QUrl: ...
    def markCurrentFunctionAsTranslationBinding(self) -> None: ...
    def networkAccessManager(self) -> PySide6.QtNetwork.QNetworkAccessManager: ...
    def networkAccessManagerFactory(self) -> PySide6.QtQml.QQmlNetworkAccessManagerFactory: ...
    def offlineStorageDatabaseFilePath(self, databaseName: str) -> str: ...
    def offlineStoragePath(self) -> str: ...
    def outputWarningsToStandardError(self) -> bool: ...
    def pluginPathList(self) -> List[str]: ...
    def removeImageProvider(self, id: str) -> None: ...
    def removeUrlInterceptor(self, urlInterceptor: PySide6.QtQml.QQmlAbstractUrlInterceptor) -> None: ...
    def retranslate(self) -> None: ...
    def rootContext(self) -> PySide6.QtQml.QQmlContext: ...
    def setBaseUrl(self, arg__1: Union[PySide6.QtCore.QUrl, str]) -> None: ...
    @staticmethod
    def setContextForObject(arg__1: PySide6.QtCore.QObject, arg__2: PySide6.QtQml.QQmlContext) -> None: ...
    def setImportPathList(self, paths: Sequence[str]) -> None: ...
    def setIncubationController(self, arg__1: PySide6.QtQml.QQmlIncubationController) -> None: ...
    def setNetworkAccessManagerFactory(self, arg__1: PySide6.QtQml.QQmlNetworkAccessManagerFactory) -> None: ...
    def setOfflineStoragePath(self, dir: str) -> None: ...
    def setOutputWarningsToStandardError(self, arg__1: bool) -> None: ...
    def setPluginPathList(self, paths: Sequence[str]) -> None: ...
    def setUrlInterceptor(self, urlInterceptor: PySide6.QtQml.QQmlAbstractUrlInterceptor) -> None: ...
    def trimComponentCache(self) -> None: ...
    def urlInterceptor(self) -> PySide6.QtQml.QQmlAbstractUrlInterceptor: ...
    def urlInterceptors(self) -> List[PySide6.QtQml.QQmlAbstractUrlInterceptor]: ...


class QQmlError(Shiboken.Object):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlError) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def __repr__(self) -> object: ...
    def column(self) -> int: ...
    def description(self) -> str: ...
    def isValid(self) -> bool: ...
    def line(self) -> int: ...
    def messageType(self) -> PySide6.QtCore.QtMsgType: ...
    def object(self) -> PySide6.QtCore.QObject: ...
    def setColumn(self, arg__1: int) -> None: ...
    def setDescription(self, arg__1: str) -> None: ...
    def setLine(self, arg__1: int) -> None: ...
    def setMessageType(self, messageType: PySide6.QtCore.QtMsgType) -> None: ...
    def setObject(self, arg__1: PySide6.QtCore.QObject) -> None: ...
    def setUrl(self, arg__1: Union[PySide6.QtCore.QUrl, str]) -> None: ...
    def swap(self, other: PySide6.QtQml.QQmlError) -> None: ...
    def toString(self) -> str: ...
    def url(self) -> PySide6.QtCore.QUrl: ...


class QQmlExpression(PySide6.QtCore.QObject):

    valueChanged             : ClassVar[Signal] = ... # valueChanged()

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlContext, arg__2: PySide6.QtCore.QObject, arg__3: str, arg__4: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlScriptString, arg__2: Optional[PySide6.QtQml.QQmlContext] = ..., arg__3: Optional[PySide6.QtCore.QObject] = ..., arg__4: Optional[PySide6.QtCore.QObject] = ...) -> None: ...

    def clearError(self) -> None: ...
    def columnNumber(self) -> int: ...
    def context(self) -> PySide6.QtQml.QQmlContext: ...
    def engine(self) -> PySide6.QtQml.QQmlEngine: ...
    def error(self) -> PySide6.QtQml.QQmlError: ...
    def evaluate(self) -> Tuple[Any, bool]: ...
    def expression(self) -> str: ...
    def hasError(self) -> bool: ...
    def lineNumber(self) -> int: ...
    def notifyOnValueChanged(self) -> bool: ...
    def scopeObject(self) -> PySide6.QtCore.QObject: ...
    def setExpression(self, arg__1: str) -> None: ...
    def setNotifyOnValueChanged(self, arg__1: bool) -> None: ...
    def setSourceLocation(self, fileName: str, line: int, column: int = ...) -> None: ...
    def sourceFile(self) -> str: ...


class QQmlExtensionInterface(PySide6.QtQml.QQmlTypesExtensionInterface):

    def __init__(self) -> None: ...

    def initializeEngine(self, engine: PySide6.QtQml.QQmlEngine, uri: bytes) -> None: ...


class QQmlExtensionPlugin(PySide6.QtCore.QObject, PySide6.QtQml.QQmlExtensionInterface):

    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...

    def baseUrl(self) -> PySide6.QtCore.QUrl: ...
    def initializeEngine(self, engine: PySide6.QtQml.QQmlEngine, uri: bytes) -> None: ...
    def registerTypes(self, uri: bytes) -> None: ...
    def unregisterTypes(self) -> None: ...


class QQmlFile(Shiboken.Object):

    class Status(enum.Enum):

        Null                     : QQmlFile.Status = ... # 0x0
        Ready                    : QQmlFile.Status = ... # 0x1
        Error                    : QQmlFile.Status = ... # 0x2
        Loading                  : QQmlFile.Status = ... # 0x3


    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlEngine, arg__2: str) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlEngine, arg__2: Union[PySide6.QtCore.QUrl, str]) -> None: ...

    @overload
    def clear(self) -> None: ...
    @overload
    def clear(self, arg__1: PySide6.QtCore.QObject) -> None: ...
    @overload
    def connectDownloadProgress(self, arg__1: PySide6.QtCore.QObject, arg__2: bytes) -> bool: ...
    @overload
    def connectDownloadProgress(self, arg__1: PySide6.QtCore.QObject, arg__2: int) -> bool: ...
    @overload
    def connectFinished(self, arg__1: PySide6.QtCore.QObject, arg__2: bytes) -> bool: ...
    @overload
    def connectFinished(self, arg__1: PySide6.QtCore.QObject, arg__2: int) -> bool: ...
    def data(self) -> bytes: ...
    def dataByteArray(self) -> PySide6.QtCore.QByteArray: ...
    def error(self) -> str: ...
    def isError(self) -> bool: ...
    def isLoading(self) -> bool: ...
    @overload
    @staticmethod
    def isLocalFile(url: str) -> bool: ...
    @overload
    @staticmethod
    def isLocalFile(url: Union[PySide6.QtCore.QUrl, str]) -> bool: ...
    def isNull(self) -> bool: ...
    def isReady(self) -> bool: ...
    @overload
    @staticmethod
    def isSynchronous(url: str) -> bool: ...
    @overload
    @staticmethod
    def isSynchronous(url: Union[PySide6.QtCore.QUrl, str]) -> bool: ...
    @overload
    def load(self, arg__1: PySide6.QtQml.QQmlEngine, arg__2: str) -> None: ...
    @overload
    def load(self, arg__1: PySide6.QtQml.QQmlEngine, arg__2: Union[PySide6.QtCore.QUrl, str]) -> None: ...
    def size(self) -> int: ...
    def status(self) -> PySide6.QtQml.QQmlFile.Status: ...
    def url(self) -> PySide6.QtCore.QUrl: ...
    @overload
    @staticmethod
    def urlToLocalFileOrQrc(arg__1: str) -> str: ...
    @overload
    @staticmethod
    def urlToLocalFileOrQrc(arg__1: Union[PySide6.QtCore.QUrl, str]) -> str: ...


class QQmlFileSelector(PySide6.QtCore.QObject):

    def __init__(self, engine: PySide6.QtQml.QQmlEngine, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...

    @staticmethod
    def get(arg__1: PySide6.QtQml.QQmlEngine) -> PySide6.QtQml.QQmlFileSelector: ...
    def selector(self) -> PySide6.QtCore.QFileSelector: ...
    def setExtraSelectors(self, strings: Sequence[str]) -> None: ...
    def setSelector(self, selector: PySide6.QtCore.QFileSelector) -> None: ...


class QQmlImageProviderBase(PySide6.QtCore.QObject):

    class Flag(enum.Flag):

        ForceAsynchronousImageLoading: QQmlImageProviderBase.Flag = ... # 0x1

    class ImageType(enum.Enum):

        Invalid                  : QQmlImageProviderBase.ImageType = ... # 0x0
        Image                    : QQmlImageProviderBase.ImageType = ... # 0x1
        Pixmap                   : QQmlImageProviderBase.ImageType = ... # 0x2
        Texture                  : QQmlImageProviderBase.ImageType = ... # 0x3
        ImageResponse            : QQmlImageProviderBase.ImageType = ... # 0x4


    def flags(self) -> PySide6.QtQml.QQmlImageProviderBase.Flag: ...
    def imageType(self) -> PySide6.QtQml.QQmlImageProviderBase.ImageType: ...


class QQmlIncubationController(Shiboken.Object):

    def __init__(self) -> None: ...

    def engine(self) -> PySide6.QtQml.QQmlEngine: ...
    def incubateFor(self, msecs: int) -> None: ...
    def incubateWhile(self, flag: PySide6.QtQml.VolatileBool, msecs: int = ...) -> None: ...
    def incubatingObjectCount(self) -> int: ...
    def incubatingObjectCountChanged(self, arg__1: int) -> None: ...


class QQmlIncubator(Shiboken.Object):

    class IncubationMode(enum.Enum):

        Asynchronous             : QQmlIncubator.IncubationMode = ... # 0x0
        AsynchronousIfNested     : QQmlIncubator.IncubationMode = ... # 0x1
        Synchronous              : QQmlIncubator.IncubationMode = ... # 0x2

    class Status(enum.Enum):

        Null                     : QQmlIncubator.Status = ... # 0x0
        Ready                    : QQmlIncubator.Status = ... # 0x1
        Loading                  : QQmlIncubator.Status = ... # 0x2
        Error                    : QQmlIncubator.Status = ... # 0x3


    def __init__(self, arg__1: PySide6.QtQml.QQmlIncubator.IncubationMode = ...) -> None: ...

    def clear(self) -> None: ...
    def errors(self) -> List[PySide6.QtQml.QQmlError]: ...
    def forceCompletion(self) -> None: ...
    def incubationMode(self) -> PySide6.QtQml.QQmlIncubator.IncubationMode: ...
    def isError(self) -> bool: ...
    def isLoading(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isReady(self) -> bool: ...
    def object(self) -> PySide6.QtCore.QObject: ...
    def setInitialProperties(self, initialProperties: Dict[str, Any]) -> None: ...
    def setInitialState(self, arg__1: PySide6.QtCore.QObject) -> None: ...
    def status(self) -> PySide6.QtQml.QQmlIncubator.Status: ...
    def statusChanged(self, arg__1: PySide6.QtQml.QQmlIncubator.Status) -> None: ...


class QQmlListReference(Shiboken.Object):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlListReference) -> None: ...
    @overload
    def __init__(self, o: PySide6.QtCore.QObject, property: bytes) -> None: ...
    @overload
    def __init__(self, o: PySide6.QtCore.QObject, property: bytes, engine: PySide6.QtQml.QQmlEngine) -> None: ...
    @overload
    def __init__(self, variant: Any) -> None: ...
    @overload
    def __init__(self, variant: Any, engine: PySide6.QtQml.QQmlEngine) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def append(self, arg__1: PySide6.QtCore.QObject) -> bool: ...
    def at(self, arg__1: int) -> PySide6.QtCore.QObject: ...
    def canAppend(self) -> bool: ...
    def canAt(self) -> bool: ...
    def canClear(self) -> bool: ...
    def canCount(self) -> bool: ...
    def canRemoveLast(self) -> bool: ...
    def canReplace(self) -> bool: ...
    def clear(self) -> bool: ...
    def count(self) -> int: ...
    def isManipulable(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isValid(self) -> bool: ...
    def listElementType(self) -> PySide6.QtCore.QMetaObject: ...
    def object(self) -> PySide6.QtCore.QObject: ...
    def removeLast(self) -> bool: ...
    def replace(self, arg__1: int, arg__2: PySide6.QtCore.QObject) -> bool: ...
    def size(self) -> int: ...


class QQmlModuleImportSpecialVersions(enum.Flag):

    QQmlModuleImportAuto     : QQmlModuleImportSpecialVersions = ... # -0x2
    QQmlModuleImportLatest   : QQmlModuleImportSpecialVersions = ... # -0x1
    QQmlModuleImportModuleAny: QQmlModuleImportSpecialVersions = ... # -0x1


class QQmlNetworkAccessManagerFactory(Shiboken.Object):

    def __init__(self) -> None: ...

    def create(self, parent: PySide6.QtCore.QObject) -> PySide6.QtNetwork.QNetworkAccessManager: ...


class QQmlParserStatus(Shiboken.Object):

    def __init__(self) -> None: ...

    def classBegin(self) -> None: ...
    def componentComplete(self) -> None: ...


class QQmlProperty(Shiboken.Object):

    class PropertyTypeCategory(enum.Enum):

        InvalidCategory          : QQmlProperty.PropertyTypeCategory = ... # 0x0
        List                     : QQmlProperty.PropertyTypeCategory = ... # 0x1
        Object                   : QQmlProperty.PropertyTypeCategory = ... # 0x2
        Normal                   : QQmlProperty.PropertyTypeCategory = ... # 0x3

    class Type(enum.Enum):

        Invalid                  : QQmlProperty.Type = ... # 0x0
        Property                 : QQmlProperty.Type = ... # 0x1
        SignalProperty           : QQmlProperty.Type = ... # 0x2


    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtCore.QObject) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtCore.QObject, arg__2: PySide6.QtQml.QQmlContext) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtCore.QObject, arg__2: PySide6.QtQml.QQmlEngine) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtCore.QObject, arg__2: str) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: PySide6.QtQml.QQmlContext) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: PySide6.QtQml.QQmlEngine) -> None: ...
    @overload
    def __init__(self, arg__1: Union[PySide6.QtQml.QQmlProperty, PySide6.QtCore.QObject]) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    @overload
    def connectNotifySignal(self, dest: PySide6.QtCore.QObject, method: int) -> bool: ...
    @overload
    def connectNotifySignal(self, dest: PySide6.QtCore.QObject, slot: bytes) -> bool: ...
    def hasNotifySignal(self) -> bool: ...
    def index(self) -> int: ...
    def isBindable(self) -> bool: ...
    def isDesignable(self) -> bool: ...
    def isProperty(self) -> bool: ...
    def isResettable(self) -> bool: ...
    def isSignalProperty(self) -> bool: ...
    def isValid(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def method(self) -> PySide6.QtCore.QMetaMethod: ...
    def name(self) -> str: ...
    def needsNotifySignal(self) -> bool: ...
    def object(self) -> PySide6.QtCore.QObject: ...
    def property(self) -> PySide6.QtCore.QMetaProperty: ...
    def propertyMetaType(self) -> PySide6.QtCore.QMetaType: ...
    def propertyType(self) -> int: ...
    def propertyTypeCategory(self) -> PySide6.QtQml.QQmlProperty.PropertyTypeCategory: ...
    def propertyTypeName(self) -> bytes: ...
    @overload
    @staticmethod
    def read(arg__1: PySide6.QtCore.QObject, arg__2: str) -> Any: ...
    @overload
    @staticmethod
    def read(arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: PySide6.QtQml.QQmlContext) -> Any: ...
    @overload
    @staticmethod
    def read(arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: PySide6.QtQml.QQmlEngine) -> Any: ...
    @overload
    def read(self) -> Any: ...
    def reset(self) -> bool: ...
    def swap(self, other: Union[PySide6.QtQml.QQmlProperty, PySide6.QtCore.QObject]) -> None: ...
    def type(self) -> PySide6.QtQml.QQmlProperty.Type: ...
    @overload
    @staticmethod
    def write(arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: Any) -> bool: ...
    @overload
    @staticmethod
    def write(arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: Any, arg__4: PySide6.QtQml.QQmlContext) -> bool: ...
    @overload
    @staticmethod
    def write(arg__1: PySide6.QtCore.QObject, arg__2: str, arg__3: Any, arg__4: PySide6.QtQml.QQmlEngine) -> bool: ...
    @overload
    def write(self, arg__1: Any) -> bool: ...


class QQmlPropertyMap(PySide6.QtCore.QObject):

    valueChanged             : ClassVar[Signal] = ... # valueChanged(QString,QVariant)

    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...

    def clear(self, key: str) -> None: ...
    def contains(self, key: str) -> bool: ...
    def count(self) -> int: ...
    def freeze(self) -> None: ...
    @overload
    def insert(self, key: str, value: Any) -> None: ...
    @overload
    def insert(self, values: Dict[str, Any]) -> None: ...
    def isEmpty(self) -> bool: ...
    def keys(self) -> List[str]: ...
    def size(self) -> int: ...
    def updateValue(self, key: str, input: Any) -> Any: ...
    def value(self, key: str) -> Any: ...


class QQmlPropertyValueSource(Shiboken.Object):

    def __init__(self) -> None: ...

    def setTarget(self, arg__1: Union[PySide6.QtQml.QQmlProperty, PySide6.QtCore.QObject]) -> None: ...


class QQmlScriptString(Shiboken.Object):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtQml.QQmlScriptString) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def booleanLiteral(self) -> Tuple[bool, bool]: ...
    def isEmpty(self) -> bool: ...
    def isNullLiteral(self) -> bool: ...
    def isUndefinedLiteral(self) -> bool: ...
    def numberLiteral(self) -> Tuple[float, bool]: ...
    def stringLiteral(self) -> str: ...


class QQmlTypesExtensionInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def registerTypes(self, uri: bytes) -> None: ...


class QmlAttached(object): ...


class QmlExtended(object): ...


class QmlForeign(object): ...


class QmlNamedElement(object): ...


class QmlUncreatable(object): ...


class VolatileBool(object):
    def get(self) -> bool: ...
    def set(self, a: object) -> None: ...


def QmlAnonymous(arg__1: object) -> object: ...
def QmlElement(arg__1: object) -> object: ...
def QmlSingleton(arg__1: object) -> object: ...
def qjsEngine(arg__1: PySide6.QtCore.QObject) -> Optional[PySide6.QtQml.QJSEngine]: ...
def qmlAttachedPropertiesObject(type_obj: type, arg__2: PySide6.QtCore.QObject, arg__3: bool = ...) -> PySide6.QtCore.QObject: ...
def qmlClearTypeRegistrations() -> None: ...
def qmlContext(arg__1: PySide6.QtCore.QObject) -> Optional[PySide6.QtQml.QQmlContext]: ...
def qmlEngine(arg__1: PySide6.QtCore.QObject) -> Optional[PySide6.QtQml.QQmlEngine]: ...
def qmlProtectModule(uri: bytes, majVersion: int) -> bool: ...
def qmlRegisterModule(uri: bytes, versionMajor: int, versionMinor: int) -> None: ...
def qmlRegisterSingletonInstance(type_obj: type, uri: str, version_major: int, version_minor: int, qml_name: bytes, callback: object) -> int: ...
@overload
def qmlRegisterSingletonType(type_obj: type, uri: str, version_major: int, version_minor: int, qml_name: bytes) -> int: ...
@overload
def qmlRegisterSingletonType(type_obj: type, uri: str, version_major: int, version_minor: int, qml_name: bytes, callback: object) -> int: ...
@overload
def qmlRegisterSingletonType(uri: str, version_major: int, version_minor: int, qml_name: bytes, callback: object) -> int: ...
@overload
def qmlRegisterSingletonType(url: Union[PySide6.QtCore.QUrl, str], uri: bytes, versionMajor: int, versionMinor: int, qmlName: bytes) -> int: ...
@overload
def qmlRegisterType(type_obj: type, uri: str, version_major: int, version_minor: int, qml_name: bytes) -> int: ...
@overload
def qmlRegisterType(url: Union[PySide6.QtCore.QUrl, str], uri: bytes, versionMajor: int, versionMinor: int, qmlName: bytes) -> int: ...
def qmlRegisterUncreatableMetaObject(staticMetaObject: PySide6.QtCore.QMetaObject, uri: bytes, versionMajor: int, versionMinor: int, qmlName: bytes, reason: str) -> int: ...
def qmlRegisterUncreatableType(type_obj: type, uri: str, version_major: int, version_minor: int, qml_name: bytes, message: bytes) -> int: ...
def qmlTypeId(uri: bytes, versionMajor: int, versionMinor: int, qmlName: bytes) -> int: ...


# eof
