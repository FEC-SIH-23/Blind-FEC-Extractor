// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/service/gpu/gpu_autotuning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "xla/autotuning.pb.h"
#include "xla/service/hlo.pb.h"
#include "xla/xla_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto;
namespace xla {
namespace gpu {
class AlgorithmDenylist;
struct AlgorithmDenylistDefaultTypeInternal;
extern AlgorithmDenylistDefaultTypeInternal _AlgorithmDenylist_default_instance_;
class AlgorithmDenylistEntry;
struct AlgorithmDenylistEntryDefaultTypeInternal;
extern AlgorithmDenylistEntryDefaultTypeInternal _AlgorithmDenylistEntry_default_instance_;
class ConvInstructionLog;
struct ConvInstructionLogDefaultTypeInternal;
extern ConvInstructionLogDefaultTypeInternal _ConvInstructionLog_default_instance_;
class DenylistedAlgorithm;
struct DenylistedAlgorithmDefaultTypeInternal;
extern DenylistedAlgorithmDefaultTypeInternal _DenylistedAlgorithm_default_instance_;
}  // namespace gpu
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> ::xla::gpu::AlgorithmDenylist* Arena::CreateMaybeMessage<::xla::gpu::AlgorithmDenylist>(Arena*);
template<> ::xla::gpu::AlgorithmDenylistEntry* Arena::CreateMaybeMessage<::xla::gpu::AlgorithmDenylistEntry>(Arena*);
template<> ::xla::gpu::ConvInstructionLog* Arena::CreateMaybeMessage<::xla::gpu::ConvInstructionLog>(Arena*);
template<> ::xla::gpu::DenylistedAlgorithm* Arena::CreateMaybeMessage<::xla::gpu::DenylistedAlgorithm>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {
namespace gpu {

// ===================================================================

class ConvInstructionLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.gpu.ConvInstructionLog) */ {
 public:
  inline ConvInstructionLog() : ConvInstructionLog(nullptr) {}
  ~ConvInstructionLog() override;
  explicit PROTOBUF_CONSTEXPR ConvInstructionLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConvInstructionLog(const ConvInstructionLog& from);
  ConvInstructionLog(ConvInstructionLog&& from) noexcept
    : ConvInstructionLog() {
    *this = ::std::move(from);
  }

  inline ConvInstructionLog& operator=(const ConvInstructionLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvInstructionLog& operator=(ConvInstructionLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConvInstructionLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConvInstructionLog* internal_default_instance() {
    return reinterpret_cast<const ConvInstructionLog*>(
               &_ConvInstructionLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConvInstructionLog& a, ConvInstructionLog& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvInstructionLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvInstructionLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConvInstructionLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConvInstructionLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConvInstructionLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConvInstructionLog& from) {
    ConvInstructionLog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvInstructionLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.gpu.ConvInstructionLog";
  }
  protected:
  explicit ConvInstructionLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperandShapesFieldNumber = 2,
    kResultAddressesFieldNumber = 3,
    kOperandAddressesFieldNumber = 4,
    kInstructionFieldNumber = 1,
  };
  // repeated .xla.ShapeProto operand_shapes = 2;
  int operand_shapes_size() const;
  private:
  int _internal_operand_shapes_size() const;
  public:
  void clear_operand_shapes();
  ::xla::ShapeProto* mutable_operand_shapes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto >*
      mutable_operand_shapes();
  private:
  const ::xla::ShapeProto& _internal_operand_shapes(int index) const;
  ::xla::ShapeProto* _internal_add_operand_shapes();
  public:
  const ::xla::ShapeProto& operand_shapes(int index) const;
  ::xla::ShapeProto* add_operand_shapes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto >&
      operand_shapes() const;

  // repeated uint64 result_addresses = 3;
  int result_addresses_size() const;
  private:
  int _internal_result_addresses_size() const;
  public:
  void clear_result_addresses();
  private:
  uint64_t _internal_result_addresses(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_result_addresses() const;
  void _internal_add_result_addresses(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_result_addresses();
  public:
  uint64_t result_addresses(int index) const;
  void set_result_addresses(int index, uint64_t value);
  void add_result_addresses(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      result_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_result_addresses();

  // repeated uint64 operand_addresses = 4;
  int operand_addresses_size() const;
  private:
  int _internal_operand_addresses_size() const;
  public:
  void clear_operand_addresses();
  private:
  uint64_t _internal_operand_addresses(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_operand_addresses() const;
  void _internal_add_operand_addresses(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_operand_addresses();
  public:
  uint64_t operand_addresses(int index) const;
  void set_operand_addresses(int index, uint64_t value);
  void add_operand_addresses(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      operand_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_operand_addresses();

  // .xla.HloInstructionProto instruction = 1;
  bool has_instruction() const;
  private:
  bool _internal_has_instruction() const;
  public:
  void clear_instruction();
  const ::xla::HloInstructionProto& instruction() const;
  PROTOBUF_NODISCARD ::xla::HloInstructionProto* release_instruction();
  ::xla::HloInstructionProto* mutable_instruction();
  void set_allocated_instruction(::xla::HloInstructionProto* instruction);
  private:
  const ::xla::HloInstructionProto& _internal_instruction() const;
  ::xla::HloInstructionProto* _internal_mutable_instruction();
  public:
  void unsafe_arena_set_allocated_instruction(
      ::xla::HloInstructionProto* instruction);
  ::xla::HloInstructionProto* unsafe_arena_release_instruction();

  // @@protoc_insertion_point(class_scope:xla.gpu.ConvInstructionLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto > operand_shapes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > result_addresses_;
    mutable std::atomic<int> _result_addresses_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > operand_addresses_;
    mutable std::atomic<int> _operand_addresses_cached_byte_size_;
    ::xla::HloInstructionProto* instruction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto;
};
// -------------------------------------------------------------------

class DenylistedAlgorithm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.gpu.DenylistedAlgorithm) */ {
 public:
  inline DenylistedAlgorithm() : DenylistedAlgorithm(nullptr) {}
  ~DenylistedAlgorithm() override;
  explicit PROTOBUF_CONSTEXPR DenylistedAlgorithm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DenylistedAlgorithm(const DenylistedAlgorithm& from);
  DenylistedAlgorithm(DenylistedAlgorithm&& from) noexcept
    : DenylistedAlgorithm() {
    *this = ::std::move(from);
  }

  inline DenylistedAlgorithm& operator=(const DenylistedAlgorithm& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenylistedAlgorithm& operator=(DenylistedAlgorithm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DenylistedAlgorithm& default_instance() {
    return *internal_default_instance();
  }
  static inline const DenylistedAlgorithm* internal_default_instance() {
    return reinterpret_cast<const DenylistedAlgorithm*>(
               &_DenylistedAlgorithm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DenylistedAlgorithm& a, DenylistedAlgorithm& b) {
    a.Swap(&b);
  }
  inline void Swap(DenylistedAlgorithm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DenylistedAlgorithm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DenylistedAlgorithm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DenylistedAlgorithm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DenylistedAlgorithm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DenylistedAlgorithm& from) {
    DenylistedAlgorithm::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenylistedAlgorithm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.gpu.DenylistedAlgorithm";
  }
  protected:
  explicit DenylistedAlgorithm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTensorOpsFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // bool tensor_ops = 2;
  void clear_tensor_ops();
  bool tensor_ops() const;
  void set_tensor_ops(bool value);
  private:
  bool _internal_tensor_ops() const;
  void _internal_set_tensor_ops(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xla.gpu.DenylistedAlgorithm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t id_;
    bool tensor_ops_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmDenylistEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.gpu.AlgorithmDenylistEntry) */ {
 public:
  inline AlgorithmDenylistEntry() : AlgorithmDenylistEntry(nullptr) {}
  ~AlgorithmDenylistEntry() override;
  explicit PROTOBUF_CONSTEXPR AlgorithmDenylistEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlgorithmDenylistEntry(const AlgorithmDenylistEntry& from);
  AlgorithmDenylistEntry(AlgorithmDenylistEntry&& from) noexcept
    : AlgorithmDenylistEntry() {
    *this = ::std::move(from);
  }

  inline AlgorithmDenylistEntry& operator=(const AlgorithmDenylistEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmDenylistEntry& operator=(AlgorithmDenylistEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlgorithmDenylistEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlgorithmDenylistEntry* internal_default_instance() {
    return reinterpret_cast<const AlgorithmDenylistEntry*>(
               &_AlgorithmDenylistEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlgorithmDenylistEntry& a, AlgorithmDenylistEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmDenylistEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmDenylistEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlgorithmDenylistEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlgorithmDenylistEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlgorithmDenylistEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlgorithmDenylistEntry& from) {
    AlgorithmDenylistEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmDenylistEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.gpu.AlgorithmDenylistEntry";
  }
  protected:
  explicit AlgorithmDenylistEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgosFieldNumber = 4,
    kHloFieldNumber = 1,
    kBlasVersionFieldNumber = 5,
    kCcFieldNumber = 2,
    kCudnnVersionFieldNumber = 3,
  };
  // repeated .xla.gpu.DenylistedAlgorithm algos = 4;
  int algos_size() const;
  private:
  int _internal_algos_size() const;
  public:
  void clear_algos();
  ::xla::gpu::DenylistedAlgorithm* mutable_algos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::DenylistedAlgorithm >*
      mutable_algos();
  private:
  const ::xla::gpu::DenylistedAlgorithm& _internal_algos(int index) const;
  ::xla::gpu::DenylistedAlgorithm* _internal_add_algos();
  public:
  const ::xla::gpu::DenylistedAlgorithm& algos(int index) const;
  ::xla::gpu::DenylistedAlgorithm* add_algos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::DenylistedAlgorithm >&
      algos() const;

  // string hlo = 1;
  void clear_hlo();
  const std::string& hlo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hlo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hlo();
  PROTOBUF_NODISCARD std::string* release_hlo();
  void set_allocated_hlo(std::string* hlo);
  private:
  const std::string& _internal_hlo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hlo(const std::string& value);
  std::string* _internal_mutable_hlo();
  public:

  // string blas_version = 5;
  void clear_blas_version();
  const std::string& blas_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blas_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blas_version();
  PROTOBUF_NODISCARD std::string* release_blas_version();
  void set_allocated_blas_version(std::string* blas_version);
  private:
  const std::string& _internal_blas_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blas_version(const std::string& value);
  std::string* _internal_mutable_blas_version();
  public:

  // .xla.ComputeCapability cc = 2;
  bool has_cc() const;
  private:
  bool _internal_has_cc() const;
  public:
  void clear_cc();
  const ::xla::ComputeCapability& cc() const;
  PROTOBUF_NODISCARD ::xla::ComputeCapability* release_cc();
  ::xla::ComputeCapability* mutable_cc();
  void set_allocated_cc(::xla::ComputeCapability* cc);
  private:
  const ::xla::ComputeCapability& _internal_cc() const;
  ::xla::ComputeCapability* _internal_mutable_cc();
  public:
  void unsafe_arena_set_allocated_cc(
      ::xla::ComputeCapability* cc);
  ::xla::ComputeCapability* unsafe_arena_release_cc();

  // .xla.CudnnVersion cudnn_version = 3;
  bool has_cudnn_version() const;
  private:
  bool _internal_has_cudnn_version() const;
  public:
  void clear_cudnn_version();
  const ::xla::CudnnVersion& cudnn_version() const;
  PROTOBUF_NODISCARD ::xla::CudnnVersion* release_cudnn_version();
  ::xla::CudnnVersion* mutable_cudnn_version();
  void set_allocated_cudnn_version(::xla::CudnnVersion* cudnn_version);
  private:
  const ::xla::CudnnVersion& _internal_cudnn_version() const;
  ::xla::CudnnVersion* _internal_mutable_cudnn_version();
  public:
  void unsafe_arena_set_allocated_cudnn_version(
      ::xla::CudnnVersion* cudnn_version);
  ::xla::CudnnVersion* unsafe_arena_release_cudnn_version();

  // @@protoc_insertion_point(class_scope:xla.gpu.AlgorithmDenylistEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::DenylistedAlgorithm > algos_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hlo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blas_version_;
    ::xla::ComputeCapability* cc_;
    ::xla::CudnnVersion* cudnn_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmDenylist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.gpu.AlgorithmDenylist) */ {
 public:
  inline AlgorithmDenylist() : AlgorithmDenylist(nullptr) {}
  ~AlgorithmDenylist() override;
  explicit PROTOBUF_CONSTEXPR AlgorithmDenylist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlgorithmDenylist(const AlgorithmDenylist& from);
  AlgorithmDenylist(AlgorithmDenylist&& from) noexcept
    : AlgorithmDenylist() {
    *this = ::std::move(from);
  }

  inline AlgorithmDenylist& operator=(const AlgorithmDenylist& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmDenylist& operator=(AlgorithmDenylist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlgorithmDenylist& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlgorithmDenylist* internal_default_instance() {
    return reinterpret_cast<const AlgorithmDenylist*>(
               &_AlgorithmDenylist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AlgorithmDenylist& a, AlgorithmDenylist& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmDenylist* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmDenylist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlgorithmDenylist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlgorithmDenylist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlgorithmDenylist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AlgorithmDenylist& from) {
    AlgorithmDenylist::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmDenylist* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.gpu.AlgorithmDenylist";
  }
  protected:
  explicit AlgorithmDenylist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .xla.gpu.AlgorithmDenylistEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::xla::gpu::AlgorithmDenylistEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::AlgorithmDenylistEntry >*
      mutable_entries();
  private:
  const ::xla::gpu::AlgorithmDenylistEntry& _internal_entries(int index) const;
  ::xla::gpu::AlgorithmDenylistEntry* _internal_add_entries();
  public:
  const ::xla::gpu::AlgorithmDenylistEntry& entries(int index) const;
  ::xla::gpu::AlgorithmDenylistEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::AlgorithmDenylistEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:xla.gpu.AlgorithmDenylist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::AlgorithmDenylistEntry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConvInstructionLog

// .xla.HloInstructionProto instruction = 1;
inline bool ConvInstructionLog::_internal_has_instruction() const {
  return this != internal_default_instance() && _impl_.instruction_ != nullptr;
}
inline bool ConvInstructionLog::has_instruction() const {
  return _internal_has_instruction();
}
inline const ::xla::HloInstructionProto& ConvInstructionLog::_internal_instruction() const {
  const ::xla::HloInstructionProto* p = _impl_.instruction_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::HloInstructionProto&>(
      ::xla::_HloInstructionProto_default_instance_);
}
inline const ::xla::HloInstructionProto& ConvInstructionLog::instruction() const {
  // @@protoc_insertion_point(field_get:xla.gpu.ConvInstructionLog.instruction)
  return _internal_instruction();
}
inline void ConvInstructionLog::unsafe_arena_set_allocated_instruction(
    ::xla::HloInstructionProto* instruction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instruction_);
  }
  _impl_.instruction_ = instruction;
  if (instruction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.gpu.ConvInstructionLog.instruction)
}
inline ::xla::HloInstructionProto* ConvInstructionLog::release_instruction() {
  
  ::xla::HloInstructionProto* temp = _impl_.instruction_;
  _impl_.instruction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::HloInstructionProto* ConvInstructionLog::unsafe_arena_release_instruction() {
  // @@protoc_insertion_point(field_release:xla.gpu.ConvInstructionLog.instruction)
  
  ::xla::HloInstructionProto* temp = _impl_.instruction_;
  _impl_.instruction_ = nullptr;
  return temp;
}
inline ::xla::HloInstructionProto* ConvInstructionLog::_internal_mutable_instruction() {
  
  if (_impl_.instruction_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::HloInstructionProto>(GetArenaForAllocation());
    _impl_.instruction_ = p;
  }
  return _impl_.instruction_;
}
inline ::xla::HloInstructionProto* ConvInstructionLog::mutable_instruction() {
  ::xla::HloInstructionProto* _msg = _internal_mutable_instruction();
  // @@protoc_insertion_point(field_mutable:xla.gpu.ConvInstructionLog.instruction)
  return _msg;
}
inline void ConvInstructionLog::set_allocated_instruction(::xla::HloInstructionProto* instruction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instruction_);
  }
  if (instruction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instruction));
    if (message_arena != submessage_arena) {
      instruction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instruction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.instruction_ = instruction;
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.ConvInstructionLog.instruction)
}

// repeated .xla.ShapeProto operand_shapes = 2;
inline int ConvInstructionLog::_internal_operand_shapes_size() const {
  return _impl_.operand_shapes_.size();
}
inline int ConvInstructionLog::operand_shapes_size() const {
  return _internal_operand_shapes_size();
}
inline ::xla::ShapeProto* ConvInstructionLog::mutable_operand_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:xla.gpu.ConvInstructionLog.operand_shapes)
  return _impl_.operand_shapes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto >*
ConvInstructionLog::mutable_operand_shapes() {
  // @@protoc_insertion_point(field_mutable_list:xla.gpu.ConvInstructionLog.operand_shapes)
  return &_impl_.operand_shapes_;
}
inline const ::xla::ShapeProto& ConvInstructionLog::_internal_operand_shapes(int index) const {
  return _impl_.operand_shapes_.Get(index);
}
inline const ::xla::ShapeProto& ConvInstructionLog::operand_shapes(int index) const {
  // @@protoc_insertion_point(field_get:xla.gpu.ConvInstructionLog.operand_shapes)
  return _internal_operand_shapes(index);
}
inline ::xla::ShapeProto* ConvInstructionLog::_internal_add_operand_shapes() {
  return _impl_.operand_shapes_.Add();
}
inline ::xla::ShapeProto* ConvInstructionLog::add_operand_shapes() {
  ::xla::ShapeProto* _add = _internal_add_operand_shapes();
  // @@protoc_insertion_point(field_add:xla.gpu.ConvInstructionLog.operand_shapes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto >&
ConvInstructionLog::operand_shapes() const {
  // @@protoc_insertion_point(field_list:xla.gpu.ConvInstructionLog.operand_shapes)
  return _impl_.operand_shapes_;
}

// repeated uint64 result_addresses = 3;
inline int ConvInstructionLog::_internal_result_addresses_size() const {
  return _impl_.result_addresses_.size();
}
inline int ConvInstructionLog::result_addresses_size() const {
  return _internal_result_addresses_size();
}
inline void ConvInstructionLog::clear_result_addresses() {
  _impl_.result_addresses_.Clear();
}
inline uint64_t ConvInstructionLog::_internal_result_addresses(int index) const {
  return _impl_.result_addresses_.Get(index);
}
inline uint64_t ConvInstructionLog::result_addresses(int index) const {
  // @@protoc_insertion_point(field_get:xla.gpu.ConvInstructionLog.result_addresses)
  return _internal_result_addresses(index);
}
inline void ConvInstructionLog::set_result_addresses(int index, uint64_t value) {
  _impl_.result_addresses_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.gpu.ConvInstructionLog.result_addresses)
}
inline void ConvInstructionLog::_internal_add_result_addresses(uint64_t value) {
  _impl_.result_addresses_.Add(value);
}
inline void ConvInstructionLog::add_result_addresses(uint64_t value) {
  _internal_add_result_addresses(value);
  // @@protoc_insertion_point(field_add:xla.gpu.ConvInstructionLog.result_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ConvInstructionLog::_internal_result_addresses() const {
  return _impl_.result_addresses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ConvInstructionLog::result_addresses() const {
  // @@protoc_insertion_point(field_list:xla.gpu.ConvInstructionLog.result_addresses)
  return _internal_result_addresses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ConvInstructionLog::_internal_mutable_result_addresses() {
  return &_impl_.result_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ConvInstructionLog::mutable_result_addresses() {
  // @@protoc_insertion_point(field_mutable_list:xla.gpu.ConvInstructionLog.result_addresses)
  return _internal_mutable_result_addresses();
}

// repeated uint64 operand_addresses = 4;
inline int ConvInstructionLog::_internal_operand_addresses_size() const {
  return _impl_.operand_addresses_.size();
}
inline int ConvInstructionLog::operand_addresses_size() const {
  return _internal_operand_addresses_size();
}
inline void ConvInstructionLog::clear_operand_addresses() {
  _impl_.operand_addresses_.Clear();
}
inline uint64_t ConvInstructionLog::_internal_operand_addresses(int index) const {
  return _impl_.operand_addresses_.Get(index);
}
inline uint64_t ConvInstructionLog::operand_addresses(int index) const {
  // @@protoc_insertion_point(field_get:xla.gpu.ConvInstructionLog.operand_addresses)
  return _internal_operand_addresses(index);
}
inline void ConvInstructionLog::set_operand_addresses(int index, uint64_t value) {
  _impl_.operand_addresses_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.gpu.ConvInstructionLog.operand_addresses)
}
inline void ConvInstructionLog::_internal_add_operand_addresses(uint64_t value) {
  _impl_.operand_addresses_.Add(value);
}
inline void ConvInstructionLog::add_operand_addresses(uint64_t value) {
  _internal_add_operand_addresses(value);
  // @@protoc_insertion_point(field_add:xla.gpu.ConvInstructionLog.operand_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ConvInstructionLog::_internal_operand_addresses() const {
  return _impl_.operand_addresses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ConvInstructionLog::operand_addresses() const {
  // @@protoc_insertion_point(field_list:xla.gpu.ConvInstructionLog.operand_addresses)
  return _internal_operand_addresses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ConvInstructionLog::_internal_mutable_operand_addresses() {
  return &_impl_.operand_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ConvInstructionLog::mutable_operand_addresses() {
  // @@protoc_insertion_point(field_mutable_list:xla.gpu.ConvInstructionLog.operand_addresses)
  return _internal_mutable_operand_addresses();
}

// -------------------------------------------------------------------

// DenylistedAlgorithm

// int64 id = 1;
inline void DenylistedAlgorithm::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t DenylistedAlgorithm::_internal_id() const {
  return _impl_.id_;
}
inline int64_t DenylistedAlgorithm::id() const {
  // @@protoc_insertion_point(field_get:xla.gpu.DenylistedAlgorithm.id)
  return _internal_id();
}
inline void DenylistedAlgorithm::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void DenylistedAlgorithm::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:xla.gpu.DenylistedAlgorithm.id)
}

// bool tensor_ops = 2;
inline void DenylistedAlgorithm::clear_tensor_ops() {
  _impl_.tensor_ops_ = false;
}
inline bool DenylistedAlgorithm::_internal_tensor_ops() const {
  return _impl_.tensor_ops_;
}
inline bool DenylistedAlgorithm::tensor_ops() const {
  // @@protoc_insertion_point(field_get:xla.gpu.DenylistedAlgorithm.tensor_ops)
  return _internal_tensor_ops();
}
inline void DenylistedAlgorithm::_internal_set_tensor_ops(bool value) {
  
  _impl_.tensor_ops_ = value;
}
inline void DenylistedAlgorithm::set_tensor_ops(bool value) {
  _internal_set_tensor_ops(value);
  // @@protoc_insertion_point(field_set:xla.gpu.DenylistedAlgorithm.tensor_ops)
}

// -------------------------------------------------------------------

// AlgorithmDenylistEntry

// string hlo = 1;
inline void AlgorithmDenylistEntry::clear_hlo() {
  _impl_.hlo_.ClearToEmpty();
}
inline const std::string& AlgorithmDenylistEntry::hlo() const {
  // @@protoc_insertion_point(field_get:xla.gpu.AlgorithmDenylistEntry.hlo)
  return _internal_hlo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlgorithmDenylistEntry::set_hlo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hlo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.gpu.AlgorithmDenylistEntry.hlo)
}
inline std::string* AlgorithmDenylistEntry::mutable_hlo() {
  std::string* _s = _internal_mutable_hlo();
  // @@protoc_insertion_point(field_mutable:xla.gpu.AlgorithmDenylistEntry.hlo)
  return _s;
}
inline const std::string& AlgorithmDenylistEntry::_internal_hlo() const {
  return _impl_.hlo_.Get();
}
inline void AlgorithmDenylistEntry::_internal_set_hlo(const std::string& value) {
  
  _impl_.hlo_.Set(value, GetArenaForAllocation());
}
inline std::string* AlgorithmDenylistEntry::_internal_mutable_hlo() {
  
  return _impl_.hlo_.Mutable(GetArenaForAllocation());
}
inline std::string* AlgorithmDenylistEntry::release_hlo() {
  // @@protoc_insertion_point(field_release:xla.gpu.AlgorithmDenylistEntry.hlo)
  return _impl_.hlo_.Release();
}
inline void AlgorithmDenylistEntry::set_allocated_hlo(std::string* hlo) {
  if (hlo != nullptr) {
    
  } else {
    
  }
  _impl_.hlo_.SetAllocated(hlo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hlo_.IsDefault()) {
    _impl_.hlo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.AlgorithmDenylistEntry.hlo)
}

// .xla.ComputeCapability cc = 2;
inline bool AlgorithmDenylistEntry::_internal_has_cc() const {
  return this != internal_default_instance() && _impl_.cc_ != nullptr;
}
inline bool AlgorithmDenylistEntry::has_cc() const {
  return _internal_has_cc();
}
inline const ::xla::ComputeCapability& AlgorithmDenylistEntry::_internal_cc() const {
  const ::xla::ComputeCapability* p = _impl_.cc_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ComputeCapability&>(
      ::xla::_ComputeCapability_default_instance_);
}
inline const ::xla::ComputeCapability& AlgorithmDenylistEntry::cc() const {
  // @@protoc_insertion_point(field_get:xla.gpu.AlgorithmDenylistEntry.cc)
  return _internal_cc();
}
inline void AlgorithmDenylistEntry::unsafe_arena_set_allocated_cc(
    ::xla::ComputeCapability* cc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cc_);
  }
  _impl_.cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.gpu.AlgorithmDenylistEntry.cc)
}
inline ::xla::ComputeCapability* AlgorithmDenylistEntry::release_cc() {
  
  ::xla::ComputeCapability* temp = _impl_.cc_;
  _impl_.cc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ComputeCapability* AlgorithmDenylistEntry::unsafe_arena_release_cc() {
  // @@protoc_insertion_point(field_release:xla.gpu.AlgorithmDenylistEntry.cc)
  
  ::xla::ComputeCapability* temp = _impl_.cc_;
  _impl_.cc_ = nullptr;
  return temp;
}
inline ::xla::ComputeCapability* AlgorithmDenylistEntry::_internal_mutable_cc() {
  
  if (_impl_.cc_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ComputeCapability>(GetArenaForAllocation());
    _impl_.cc_ = p;
  }
  return _impl_.cc_;
}
inline ::xla::ComputeCapability* AlgorithmDenylistEntry::mutable_cc() {
  ::xla::ComputeCapability* _msg = _internal_mutable_cc();
  // @@protoc_insertion_point(field_mutable:xla.gpu.AlgorithmDenylistEntry.cc)
  return _msg;
}
inline void AlgorithmDenylistEntry::set_allocated_cc(::xla::ComputeCapability* cc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cc_);
  }
  if (cc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cc));
    if (message_arena != submessage_arena) {
      cc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cc_ = cc;
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.AlgorithmDenylistEntry.cc)
}

// .xla.CudnnVersion cudnn_version = 3;
inline bool AlgorithmDenylistEntry::_internal_has_cudnn_version() const {
  return this != internal_default_instance() && _impl_.cudnn_version_ != nullptr;
}
inline bool AlgorithmDenylistEntry::has_cudnn_version() const {
  return _internal_has_cudnn_version();
}
inline const ::xla::CudnnVersion& AlgorithmDenylistEntry::_internal_cudnn_version() const {
  const ::xla::CudnnVersion* p = _impl_.cudnn_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::CudnnVersion&>(
      ::xla::_CudnnVersion_default_instance_);
}
inline const ::xla::CudnnVersion& AlgorithmDenylistEntry::cudnn_version() const {
  // @@protoc_insertion_point(field_get:xla.gpu.AlgorithmDenylistEntry.cudnn_version)
  return _internal_cudnn_version();
}
inline void AlgorithmDenylistEntry::unsafe_arena_set_allocated_cudnn_version(
    ::xla::CudnnVersion* cudnn_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cudnn_version_);
  }
  _impl_.cudnn_version_ = cudnn_version;
  if (cudnn_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.gpu.AlgorithmDenylistEntry.cudnn_version)
}
inline ::xla::CudnnVersion* AlgorithmDenylistEntry::release_cudnn_version() {
  
  ::xla::CudnnVersion* temp = _impl_.cudnn_version_;
  _impl_.cudnn_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::CudnnVersion* AlgorithmDenylistEntry::unsafe_arena_release_cudnn_version() {
  // @@protoc_insertion_point(field_release:xla.gpu.AlgorithmDenylistEntry.cudnn_version)
  
  ::xla::CudnnVersion* temp = _impl_.cudnn_version_;
  _impl_.cudnn_version_ = nullptr;
  return temp;
}
inline ::xla::CudnnVersion* AlgorithmDenylistEntry::_internal_mutable_cudnn_version() {
  
  if (_impl_.cudnn_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::CudnnVersion>(GetArenaForAllocation());
    _impl_.cudnn_version_ = p;
  }
  return _impl_.cudnn_version_;
}
inline ::xla::CudnnVersion* AlgorithmDenylistEntry::mutable_cudnn_version() {
  ::xla::CudnnVersion* _msg = _internal_mutable_cudnn_version();
  // @@protoc_insertion_point(field_mutable:xla.gpu.AlgorithmDenylistEntry.cudnn_version)
  return _msg;
}
inline void AlgorithmDenylistEntry::set_allocated_cudnn_version(::xla::CudnnVersion* cudnn_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cudnn_version_);
  }
  if (cudnn_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cudnn_version));
    if (message_arena != submessage_arena) {
      cudnn_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cudnn_version, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cudnn_version_ = cudnn_version;
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.AlgorithmDenylistEntry.cudnn_version)
}

// string blas_version = 5;
inline void AlgorithmDenylistEntry::clear_blas_version() {
  _impl_.blas_version_.ClearToEmpty();
}
inline const std::string& AlgorithmDenylistEntry::blas_version() const {
  // @@protoc_insertion_point(field_get:xla.gpu.AlgorithmDenylistEntry.blas_version)
  return _internal_blas_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlgorithmDenylistEntry::set_blas_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.blas_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.gpu.AlgorithmDenylistEntry.blas_version)
}
inline std::string* AlgorithmDenylistEntry::mutable_blas_version() {
  std::string* _s = _internal_mutable_blas_version();
  // @@protoc_insertion_point(field_mutable:xla.gpu.AlgorithmDenylistEntry.blas_version)
  return _s;
}
inline const std::string& AlgorithmDenylistEntry::_internal_blas_version() const {
  return _impl_.blas_version_.Get();
}
inline void AlgorithmDenylistEntry::_internal_set_blas_version(const std::string& value) {
  
  _impl_.blas_version_.Set(value, GetArenaForAllocation());
}
inline std::string* AlgorithmDenylistEntry::_internal_mutable_blas_version() {
  
  return _impl_.blas_version_.Mutable(GetArenaForAllocation());
}
inline std::string* AlgorithmDenylistEntry::release_blas_version() {
  // @@protoc_insertion_point(field_release:xla.gpu.AlgorithmDenylistEntry.blas_version)
  return _impl_.blas_version_.Release();
}
inline void AlgorithmDenylistEntry::set_allocated_blas_version(std::string* blas_version) {
  if (blas_version != nullptr) {
    
  } else {
    
  }
  _impl_.blas_version_.SetAllocated(blas_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.blas_version_.IsDefault()) {
    _impl_.blas_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.gpu.AlgorithmDenylistEntry.blas_version)
}

// repeated .xla.gpu.DenylistedAlgorithm algos = 4;
inline int AlgorithmDenylistEntry::_internal_algos_size() const {
  return _impl_.algos_.size();
}
inline int AlgorithmDenylistEntry::algos_size() const {
  return _internal_algos_size();
}
inline void AlgorithmDenylistEntry::clear_algos() {
  _impl_.algos_.Clear();
}
inline ::xla::gpu::DenylistedAlgorithm* AlgorithmDenylistEntry::mutable_algos(int index) {
  // @@protoc_insertion_point(field_mutable:xla.gpu.AlgorithmDenylistEntry.algos)
  return _impl_.algos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::DenylistedAlgorithm >*
AlgorithmDenylistEntry::mutable_algos() {
  // @@protoc_insertion_point(field_mutable_list:xla.gpu.AlgorithmDenylistEntry.algos)
  return &_impl_.algos_;
}
inline const ::xla::gpu::DenylistedAlgorithm& AlgorithmDenylistEntry::_internal_algos(int index) const {
  return _impl_.algos_.Get(index);
}
inline const ::xla::gpu::DenylistedAlgorithm& AlgorithmDenylistEntry::algos(int index) const {
  // @@protoc_insertion_point(field_get:xla.gpu.AlgorithmDenylistEntry.algos)
  return _internal_algos(index);
}
inline ::xla::gpu::DenylistedAlgorithm* AlgorithmDenylistEntry::_internal_add_algos() {
  return _impl_.algos_.Add();
}
inline ::xla::gpu::DenylistedAlgorithm* AlgorithmDenylistEntry::add_algos() {
  ::xla::gpu::DenylistedAlgorithm* _add = _internal_add_algos();
  // @@protoc_insertion_point(field_add:xla.gpu.AlgorithmDenylistEntry.algos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::DenylistedAlgorithm >&
AlgorithmDenylistEntry::algos() const {
  // @@protoc_insertion_point(field_list:xla.gpu.AlgorithmDenylistEntry.algos)
  return _impl_.algos_;
}

// -------------------------------------------------------------------

// AlgorithmDenylist

// repeated .xla.gpu.AlgorithmDenylistEntry entries = 1;
inline int AlgorithmDenylist::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int AlgorithmDenylist::entries_size() const {
  return _internal_entries_size();
}
inline void AlgorithmDenylist::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::xla::gpu::AlgorithmDenylistEntry* AlgorithmDenylist::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:xla.gpu.AlgorithmDenylist.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::AlgorithmDenylistEntry >*
AlgorithmDenylist::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:xla.gpu.AlgorithmDenylist.entries)
  return &_impl_.entries_;
}
inline const ::xla::gpu::AlgorithmDenylistEntry& AlgorithmDenylist::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::xla::gpu::AlgorithmDenylistEntry& AlgorithmDenylist::entries(int index) const {
  // @@protoc_insertion_point(field_get:xla.gpu.AlgorithmDenylist.entries)
  return _internal_entries(index);
}
inline ::xla::gpu::AlgorithmDenylistEntry* AlgorithmDenylist::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::xla::gpu::AlgorithmDenylistEntry* AlgorithmDenylist::add_entries() {
  ::xla::gpu::AlgorithmDenylistEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:xla.gpu.AlgorithmDenylist.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::gpu::AlgorithmDenylistEntry >&
AlgorithmDenylist::entries() const {
  // @@protoc_insertion_point(field_list:xla.gpu.AlgorithmDenylist.entries)
  return _impl_.entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpu
}  // namespace xla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fgpu_2fgpu_5fautotuning_2eproto
