// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/tf2xla/kernels/callback.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/node_def.pb.h"
#include "tensorflow/core/framework/tensor.pb.h"
#include "tensorflow/core/framework/tensor_shape.pb.h"
#include "tensorflow/core/framework/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto;
namespace tensorflow {
class TfCallbackData;
struct TfCallbackDataDefaultTypeInternal;
extern TfCallbackDataDefaultTypeInternal _TfCallbackData_default_instance_;
class TfCallbackData_BufferDescription;
struct TfCallbackData_BufferDescriptionDefaultTypeInternal;
extern TfCallbackData_BufferDescriptionDefaultTypeInternal _TfCallbackData_BufferDescription_default_instance_;
class TfCallbackData_InputBufferDescription;
struct TfCallbackData_InputBufferDescriptionDefaultTypeInternal;
extern TfCallbackData_InputBufferDescriptionDefaultTypeInternal _TfCallbackData_InputBufferDescription_default_instance_;
class TfCallbackData_OutputBufferDescription;
struct TfCallbackData_OutputBufferDescriptionDefaultTypeInternal;
extern TfCallbackData_OutputBufferDescriptionDefaultTypeInternal _TfCallbackData_OutputBufferDescription_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::TfCallbackData* Arena::CreateMaybeMessage<::tensorflow::TfCallbackData>(Arena*);
template<> ::tensorflow::TfCallbackData_BufferDescription* Arena::CreateMaybeMessage<::tensorflow::TfCallbackData_BufferDescription>(Arena*);
template<> ::tensorflow::TfCallbackData_InputBufferDescription* Arena::CreateMaybeMessage<::tensorflow::TfCallbackData_InputBufferDescription>(Arena*);
template<> ::tensorflow::TfCallbackData_OutputBufferDescription* Arena::CreateMaybeMessage<::tensorflow::TfCallbackData_OutputBufferDescription>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

// ===================================================================

class TfCallbackData_BufferDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.TfCallbackData.BufferDescription) */ {
 public:
  inline TfCallbackData_BufferDescription() : TfCallbackData_BufferDescription(nullptr) {}
  ~TfCallbackData_BufferDescription() override;
  explicit PROTOBUF_CONSTEXPR TfCallbackData_BufferDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfCallbackData_BufferDescription(const TfCallbackData_BufferDescription& from);
  TfCallbackData_BufferDescription(TfCallbackData_BufferDescription&& from) noexcept
    : TfCallbackData_BufferDescription() {
    *this = ::std::move(from);
  }

  inline TfCallbackData_BufferDescription& operator=(const TfCallbackData_BufferDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfCallbackData_BufferDescription& operator=(TfCallbackData_BufferDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfCallbackData_BufferDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfCallbackData_BufferDescription* internal_default_instance() {
    return reinterpret_cast<const TfCallbackData_BufferDescription*>(
               &_TfCallbackData_BufferDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TfCallbackData_BufferDescription& a, TfCallbackData_BufferDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(TfCallbackData_BufferDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfCallbackData_BufferDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TfCallbackData_BufferDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TfCallbackData_BufferDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TfCallbackData_BufferDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TfCallbackData_BufferDescription& from) {
    TfCallbackData_BufferDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfCallbackData_BufferDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.TfCallbackData.BufferDescription";
  }
  protected:
  explicit TfCallbackData_BufferDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional .tensorflow.TensorShapeProto shape = 1;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::tensorflow::TensorShapeProto& shape() const;
  PROTOBUF_NODISCARD ::tensorflow::TensorShapeProto* release_shape();
  ::tensorflow::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::tensorflow::TensorShapeProto* shape);
  private:
  const ::tensorflow::TensorShapeProto& _internal_shape() const;
  ::tensorflow::TensorShapeProto* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::tensorflow::TensorShapeProto* shape);
  ::tensorflow::TensorShapeProto* unsafe_arena_release_shape();

  // optional .tensorflow.DataType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::tensorflow::DataType type() const;
  void set_type(::tensorflow::DataType value);
  private:
  ::tensorflow::DataType _internal_type() const;
  void _internal_set_type(::tensorflow::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.TfCallbackData.BufferDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tensorflow::TensorShapeProto* shape_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto;
};
// -------------------------------------------------------------------

class TfCallbackData_InputBufferDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.TfCallbackData.InputBufferDescription) */ {
 public:
  inline TfCallbackData_InputBufferDescription() : TfCallbackData_InputBufferDescription(nullptr) {}
  ~TfCallbackData_InputBufferDescription() override;
  explicit PROTOBUF_CONSTEXPR TfCallbackData_InputBufferDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfCallbackData_InputBufferDescription(const TfCallbackData_InputBufferDescription& from);
  TfCallbackData_InputBufferDescription(TfCallbackData_InputBufferDescription&& from) noexcept
    : TfCallbackData_InputBufferDescription() {
    *this = ::std::move(from);
  }

  inline TfCallbackData_InputBufferDescription& operator=(const TfCallbackData_InputBufferDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfCallbackData_InputBufferDescription& operator=(TfCallbackData_InputBufferDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfCallbackData_InputBufferDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfCallbackData_InputBufferDescription* internal_default_instance() {
    return reinterpret_cast<const TfCallbackData_InputBufferDescription*>(
               &_TfCallbackData_InputBufferDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TfCallbackData_InputBufferDescription& a, TfCallbackData_InputBufferDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(TfCallbackData_InputBufferDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfCallbackData_InputBufferDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TfCallbackData_InputBufferDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TfCallbackData_InputBufferDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TfCallbackData_InputBufferDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TfCallbackData_InputBufferDescription& from) {
    TfCallbackData_InputBufferDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfCallbackData_InputBufferDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.TfCallbackData.InputBufferDescription";
  }
  protected:
  explicit TfCallbackData_InputBufferDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferDescriptionFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional .tensorflow.TfCallbackData.BufferDescription buffer_description = 1;
  bool has_buffer_description() const;
  private:
  bool _internal_has_buffer_description() const;
  public:
  void clear_buffer_description();
  const ::tensorflow::TfCallbackData_BufferDescription& buffer_description() const;
  PROTOBUF_NODISCARD ::tensorflow::TfCallbackData_BufferDescription* release_buffer_description();
  ::tensorflow::TfCallbackData_BufferDescription* mutable_buffer_description();
  void set_allocated_buffer_description(::tensorflow::TfCallbackData_BufferDescription* buffer_description);
  private:
  const ::tensorflow::TfCallbackData_BufferDescription& _internal_buffer_description() const;
  ::tensorflow::TfCallbackData_BufferDescription* _internal_mutable_buffer_description();
  public:
  void unsafe_arena_set_allocated_buffer_description(
      ::tensorflow::TfCallbackData_BufferDescription* buffer_description);
  ::tensorflow::TfCallbackData_BufferDescription* unsafe_arena_release_buffer_description();

  // optional .tensorflow.TensorProto value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::tensorflow::TensorProto& value() const;
  PROTOBUF_NODISCARD ::tensorflow::TensorProto* release_value();
  ::tensorflow::TensorProto* mutable_value();
  void set_allocated_value(::tensorflow::TensorProto* value);
  private:
  const ::tensorflow::TensorProto& _internal_value() const;
  ::tensorflow::TensorProto* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::tensorflow::TensorProto* value);
  ::tensorflow::TensorProto* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:tensorflow.TfCallbackData.InputBufferDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tensorflow::TfCallbackData_BufferDescription* buffer_description_;
    ::tensorflow::TensorProto* value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto;
};
// -------------------------------------------------------------------

class TfCallbackData_OutputBufferDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.TfCallbackData.OutputBufferDescription) */ {
 public:
  inline TfCallbackData_OutputBufferDescription() : TfCallbackData_OutputBufferDescription(nullptr) {}
  ~TfCallbackData_OutputBufferDescription() override;
  explicit PROTOBUF_CONSTEXPR TfCallbackData_OutputBufferDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfCallbackData_OutputBufferDescription(const TfCallbackData_OutputBufferDescription& from);
  TfCallbackData_OutputBufferDescription(TfCallbackData_OutputBufferDescription&& from) noexcept
    : TfCallbackData_OutputBufferDescription() {
    *this = ::std::move(from);
  }

  inline TfCallbackData_OutputBufferDescription& operator=(const TfCallbackData_OutputBufferDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfCallbackData_OutputBufferDescription& operator=(TfCallbackData_OutputBufferDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfCallbackData_OutputBufferDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfCallbackData_OutputBufferDescription* internal_default_instance() {
    return reinterpret_cast<const TfCallbackData_OutputBufferDescription*>(
               &_TfCallbackData_OutputBufferDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TfCallbackData_OutputBufferDescription& a, TfCallbackData_OutputBufferDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(TfCallbackData_OutputBufferDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfCallbackData_OutputBufferDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TfCallbackData_OutputBufferDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TfCallbackData_OutputBufferDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TfCallbackData_OutputBufferDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TfCallbackData_OutputBufferDescription& from) {
    TfCallbackData_OutputBufferDescription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfCallbackData_OutputBufferDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.TfCallbackData.OutputBufferDescription";
  }
  protected:
  explicit TfCallbackData_OutputBufferDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferDescriptionFieldNumber = 1,
    kIsDynamicallyPaddedFieldNumber = 2,
  };
  // optional .tensorflow.TfCallbackData.BufferDescription buffer_description = 1;
  bool has_buffer_description() const;
  private:
  bool _internal_has_buffer_description() const;
  public:
  void clear_buffer_description();
  const ::tensorflow::TfCallbackData_BufferDescription& buffer_description() const;
  PROTOBUF_NODISCARD ::tensorflow::TfCallbackData_BufferDescription* release_buffer_description();
  ::tensorflow::TfCallbackData_BufferDescription* mutable_buffer_description();
  void set_allocated_buffer_description(::tensorflow::TfCallbackData_BufferDescription* buffer_description);
  private:
  const ::tensorflow::TfCallbackData_BufferDescription& _internal_buffer_description() const;
  ::tensorflow::TfCallbackData_BufferDescription* _internal_mutable_buffer_description();
  public:
  void unsafe_arena_set_allocated_buffer_description(
      ::tensorflow::TfCallbackData_BufferDescription* buffer_description);
  ::tensorflow::TfCallbackData_BufferDescription* unsafe_arena_release_buffer_description();

  // optional bool is_dynamically_padded = 2;
  bool has_is_dynamically_padded() const;
  private:
  bool _internal_has_is_dynamically_padded() const;
  public:
  void clear_is_dynamically_padded();
  bool is_dynamically_padded() const;
  void set_is_dynamically_padded(bool value);
  private:
  bool _internal_is_dynamically_padded() const;
  void _internal_set_is_dynamically_padded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.TfCallbackData.OutputBufferDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tensorflow::TfCallbackData_BufferDescription* buffer_description_;
    bool is_dynamically_padded_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto;
};
// -------------------------------------------------------------------

class TfCallbackData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.TfCallbackData) */ {
 public:
  inline TfCallbackData() : TfCallbackData(nullptr) {}
  ~TfCallbackData() override;
  explicit PROTOBUF_CONSTEXPR TfCallbackData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfCallbackData(const TfCallbackData& from);
  TfCallbackData(TfCallbackData&& from) noexcept
    : TfCallbackData() {
    *this = ::std::move(from);
  }

  inline TfCallbackData& operator=(const TfCallbackData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfCallbackData& operator=(TfCallbackData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfCallbackData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfCallbackData* internal_default_instance() {
    return reinterpret_cast<const TfCallbackData*>(
               &_TfCallbackData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TfCallbackData& a, TfCallbackData& b) {
    a.Swap(&b);
  }
  inline void Swap(TfCallbackData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfCallbackData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TfCallbackData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TfCallbackData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TfCallbackData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TfCallbackData& from) {
    TfCallbackData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfCallbackData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.TfCallbackData";
  }
  protected:
  explicit TfCallbackData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TfCallbackData_BufferDescription BufferDescription;
  typedef TfCallbackData_InputBufferDescription InputBufferDescription;
  typedef TfCallbackData_OutputBufferDescription OutputBufferDescription;

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kOutputsFieldNumber = 3,
    kOpFieldNumber = 1,
  };
  // repeated .tensorflow.TfCallbackData.InputBufferDescription inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::tensorflow::TfCallbackData_InputBufferDescription* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_InputBufferDescription >*
      mutable_inputs();
  private:
  const ::tensorflow::TfCallbackData_InputBufferDescription& _internal_inputs(int index) const;
  ::tensorflow::TfCallbackData_InputBufferDescription* _internal_add_inputs();
  public:
  const ::tensorflow::TfCallbackData_InputBufferDescription& inputs(int index) const;
  ::tensorflow::TfCallbackData_InputBufferDescription* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_InputBufferDescription >&
      inputs() const;

  // repeated .tensorflow.TfCallbackData.OutputBufferDescription outputs = 3;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::tensorflow::TfCallbackData_OutputBufferDescription* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_OutputBufferDescription >*
      mutable_outputs();
  private:
  const ::tensorflow::TfCallbackData_OutputBufferDescription& _internal_outputs(int index) const;
  ::tensorflow::TfCallbackData_OutputBufferDescription* _internal_add_outputs();
  public:
  const ::tensorflow::TfCallbackData_OutputBufferDescription& outputs(int index) const;
  ::tensorflow::TfCallbackData_OutputBufferDescription* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_OutputBufferDescription >&
      outputs() const;

  // optional .tensorflow.NodeDef op = 1;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const ::tensorflow::NodeDef& op() const;
  PROTOBUF_NODISCARD ::tensorflow::NodeDef* release_op();
  ::tensorflow::NodeDef* mutable_op();
  void set_allocated_op(::tensorflow::NodeDef* op);
  private:
  const ::tensorflow::NodeDef& _internal_op() const;
  ::tensorflow::NodeDef* _internal_mutable_op();
  public:
  void unsafe_arena_set_allocated_op(
      ::tensorflow::NodeDef* op);
  ::tensorflow::NodeDef* unsafe_arena_release_op();

  // @@protoc_insertion_point(class_scope:tensorflow.TfCallbackData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_InputBufferDescription > inputs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_OutputBufferDescription > outputs_;
    ::tensorflow::NodeDef* op_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TfCallbackData_BufferDescription

// optional .tensorflow.TensorShapeProto shape = 1;
inline bool TfCallbackData_BufferDescription::_internal_has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline bool TfCallbackData_BufferDescription::has_shape() const {
  return _internal_has_shape();
}
inline const ::tensorflow::TensorShapeProto& TfCallbackData_BufferDescription::_internal_shape() const {
  const ::tensorflow::TensorShapeProto* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorShapeProto&>(
      ::tensorflow::_TensorShapeProto_default_instance_);
}
inline const ::tensorflow::TensorShapeProto& TfCallbackData_BufferDescription::shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.BufferDescription.shape)
  return _internal_shape();
}
inline void TfCallbackData_BufferDescription::unsafe_arena_set_allocated_shape(
    ::tensorflow::TensorShapeProto* shape) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = shape;
  if (shape) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TfCallbackData.BufferDescription.shape)
}
inline ::tensorflow::TensorShapeProto* TfCallbackData_BufferDescription::release_shape() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TensorShapeProto* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::TensorShapeProto* TfCallbackData_BufferDescription::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.TfCallbackData.BufferDescription.shape)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TensorShapeProto* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorShapeProto* TfCallbackData_BufferDescription::_internal_mutable_shape() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::TensorShapeProto>(GetArenaForAllocation());
    _impl_.shape_ = p;
  }
  return _impl_.shape_;
}
inline ::tensorflow::TensorShapeProto* TfCallbackData_BufferDescription::mutable_shape() {
  ::tensorflow::TensorShapeProto* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.BufferDescription.shape)
  return _msg;
}
inline void TfCallbackData_BufferDescription::set_allocated_shape(::tensorflow::TensorShapeProto* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_);
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape));
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TfCallbackData.BufferDescription.shape)
}

// optional .tensorflow.DataType type = 2;
inline bool TfCallbackData_BufferDescription::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TfCallbackData_BufferDescription::has_type() const {
  return _internal_has_type();
}
inline void TfCallbackData_BufferDescription::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::tensorflow::DataType TfCallbackData_BufferDescription::_internal_type() const {
  return static_cast< ::tensorflow::DataType >(_impl_.type_);
}
inline ::tensorflow::DataType TfCallbackData_BufferDescription::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.BufferDescription.type)
  return _internal_type();
}
inline void TfCallbackData_BufferDescription::_internal_set_type(::tensorflow::DataType value) {
  assert(::tensorflow::DataType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void TfCallbackData_BufferDescription::set_type(::tensorflow::DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tensorflow.TfCallbackData.BufferDescription.type)
}

// -------------------------------------------------------------------

// TfCallbackData_InputBufferDescription

// optional .tensorflow.TfCallbackData.BufferDescription buffer_description = 1;
inline bool TfCallbackData_InputBufferDescription::_internal_has_buffer_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buffer_description_ != nullptr);
  return value;
}
inline bool TfCallbackData_InputBufferDescription::has_buffer_description() const {
  return _internal_has_buffer_description();
}
inline void TfCallbackData_InputBufferDescription::clear_buffer_description() {
  if (_impl_.buffer_description_ != nullptr) _impl_.buffer_description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::TfCallbackData_BufferDescription& TfCallbackData_InputBufferDescription::_internal_buffer_description() const {
  const ::tensorflow::TfCallbackData_BufferDescription* p = _impl_.buffer_description_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TfCallbackData_BufferDescription&>(
      ::tensorflow::_TfCallbackData_BufferDescription_default_instance_);
}
inline const ::tensorflow::TfCallbackData_BufferDescription& TfCallbackData_InputBufferDescription::buffer_description() const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.InputBufferDescription.buffer_description)
  return _internal_buffer_description();
}
inline void TfCallbackData_InputBufferDescription::unsafe_arena_set_allocated_buffer_description(
    ::tensorflow::TfCallbackData_BufferDescription* buffer_description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffer_description_);
  }
  _impl_.buffer_description_ = buffer_description;
  if (buffer_description) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TfCallbackData.InputBufferDescription.buffer_description)
}
inline ::tensorflow::TfCallbackData_BufferDescription* TfCallbackData_InputBufferDescription::release_buffer_description() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TfCallbackData_BufferDescription* temp = _impl_.buffer_description_;
  _impl_.buffer_description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::TfCallbackData_BufferDescription* TfCallbackData_InputBufferDescription::unsafe_arena_release_buffer_description() {
  // @@protoc_insertion_point(field_release:tensorflow.TfCallbackData.InputBufferDescription.buffer_description)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TfCallbackData_BufferDescription* temp = _impl_.buffer_description_;
  _impl_.buffer_description_ = nullptr;
  return temp;
}
inline ::tensorflow::TfCallbackData_BufferDescription* TfCallbackData_InputBufferDescription::_internal_mutable_buffer_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.buffer_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::TfCallbackData_BufferDescription>(GetArenaForAllocation());
    _impl_.buffer_description_ = p;
  }
  return _impl_.buffer_description_;
}
inline ::tensorflow::TfCallbackData_BufferDescription* TfCallbackData_InputBufferDescription::mutable_buffer_description() {
  ::tensorflow::TfCallbackData_BufferDescription* _msg = _internal_mutable_buffer_description();
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.InputBufferDescription.buffer_description)
  return _msg;
}
inline void TfCallbackData_InputBufferDescription::set_allocated_buffer_description(::tensorflow::TfCallbackData_BufferDescription* buffer_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.buffer_description_;
  }
  if (buffer_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buffer_description);
    if (message_arena != submessage_arena) {
      buffer_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_description, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.buffer_description_ = buffer_description;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TfCallbackData.InputBufferDescription.buffer_description)
}

// optional .tensorflow.TensorProto value = 2;
inline bool TfCallbackData_InputBufferDescription::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool TfCallbackData_InputBufferDescription::has_value() const {
  return _internal_has_value();
}
inline const ::tensorflow::TensorProto& TfCallbackData_InputBufferDescription::_internal_value() const {
  const ::tensorflow::TensorProto* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TensorProto&>(
      ::tensorflow::_TensorProto_default_instance_);
}
inline const ::tensorflow::TensorProto& TfCallbackData_InputBufferDescription::value() const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.InputBufferDescription.value)
  return _internal_value();
}
inline void TfCallbackData_InputBufferDescription::unsafe_arena_set_allocated_value(
    ::tensorflow::TensorProto* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TfCallbackData.InputBufferDescription.value)
}
inline ::tensorflow::TensorProto* TfCallbackData_InputBufferDescription::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::TensorProto* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::TensorProto* TfCallbackData_InputBufferDescription::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:tensorflow.TfCallbackData.InputBufferDescription.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tensorflow::TensorProto* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::tensorflow::TensorProto* TfCallbackData_InputBufferDescription::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::TensorProto>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::tensorflow::TensorProto* TfCallbackData_InputBufferDescription::mutable_value() {
  ::tensorflow::TensorProto* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.InputBufferDescription.value)
  return _msg;
}
inline void TfCallbackData_InputBufferDescription::set_allocated_value(::tensorflow::TensorProto* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TfCallbackData.InputBufferDescription.value)
}

// -------------------------------------------------------------------

// TfCallbackData_OutputBufferDescription

// optional .tensorflow.TfCallbackData.BufferDescription buffer_description = 1;
inline bool TfCallbackData_OutputBufferDescription::_internal_has_buffer_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buffer_description_ != nullptr);
  return value;
}
inline bool TfCallbackData_OutputBufferDescription::has_buffer_description() const {
  return _internal_has_buffer_description();
}
inline void TfCallbackData_OutputBufferDescription::clear_buffer_description() {
  if (_impl_.buffer_description_ != nullptr) _impl_.buffer_description_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tensorflow::TfCallbackData_BufferDescription& TfCallbackData_OutputBufferDescription::_internal_buffer_description() const {
  const ::tensorflow::TfCallbackData_BufferDescription* p = _impl_.buffer_description_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::TfCallbackData_BufferDescription&>(
      ::tensorflow::_TfCallbackData_BufferDescription_default_instance_);
}
inline const ::tensorflow::TfCallbackData_BufferDescription& TfCallbackData_OutputBufferDescription::buffer_description() const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.OutputBufferDescription.buffer_description)
  return _internal_buffer_description();
}
inline void TfCallbackData_OutputBufferDescription::unsafe_arena_set_allocated_buffer_description(
    ::tensorflow::TfCallbackData_BufferDescription* buffer_description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffer_description_);
  }
  _impl_.buffer_description_ = buffer_description;
  if (buffer_description) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TfCallbackData.OutputBufferDescription.buffer_description)
}
inline ::tensorflow::TfCallbackData_BufferDescription* TfCallbackData_OutputBufferDescription::release_buffer_description() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TfCallbackData_BufferDescription* temp = _impl_.buffer_description_;
  _impl_.buffer_description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::TfCallbackData_BufferDescription* TfCallbackData_OutputBufferDescription::unsafe_arena_release_buffer_description() {
  // @@protoc_insertion_point(field_release:tensorflow.TfCallbackData.OutputBufferDescription.buffer_description)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::TfCallbackData_BufferDescription* temp = _impl_.buffer_description_;
  _impl_.buffer_description_ = nullptr;
  return temp;
}
inline ::tensorflow::TfCallbackData_BufferDescription* TfCallbackData_OutputBufferDescription::_internal_mutable_buffer_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.buffer_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::TfCallbackData_BufferDescription>(GetArenaForAllocation());
    _impl_.buffer_description_ = p;
  }
  return _impl_.buffer_description_;
}
inline ::tensorflow::TfCallbackData_BufferDescription* TfCallbackData_OutputBufferDescription::mutable_buffer_description() {
  ::tensorflow::TfCallbackData_BufferDescription* _msg = _internal_mutable_buffer_description();
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.OutputBufferDescription.buffer_description)
  return _msg;
}
inline void TfCallbackData_OutputBufferDescription::set_allocated_buffer_description(::tensorflow::TfCallbackData_BufferDescription* buffer_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.buffer_description_;
  }
  if (buffer_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buffer_description);
    if (message_arena != submessage_arena) {
      buffer_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffer_description, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.buffer_description_ = buffer_description;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TfCallbackData.OutputBufferDescription.buffer_description)
}

// optional bool is_dynamically_padded = 2;
inline bool TfCallbackData_OutputBufferDescription::_internal_has_is_dynamically_padded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TfCallbackData_OutputBufferDescription::has_is_dynamically_padded() const {
  return _internal_has_is_dynamically_padded();
}
inline void TfCallbackData_OutputBufferDescription::clear_is_dynamically_padded() {
  _impl_.is_dynamically_padded_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool TfCallbackData_OutputBufferDescription::_internal_is_dynamically_padded() const {
  return _impl_.is_dynamically_padded_;
}
inline bool TfCallbackData_OutputBufferDescription::is_dynamically_padded() const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.OutputBufferDescription.is_dynamically_padded)
  return _internal_is_dynamically_padded();
}
inline void TfCallbackData_OutputBufferDescription::_internal_set_is_dynamically_padded(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_dynamically_padded_ = value;
}
inline void TfCallbackData_OutputBufferDescription::set_is_dynamically_padded(bool value) {
  _internal_set_is_dynamically_padded(value);
  // @@protoc_insertion_point(field_set:tensorflow.TfCallbackData.OutputBufferDescription.is_dynamically_padded)
}

// -------------------------------------------------------------------

// TfCallbackData

// optional .tensorflow.NodeDef op = 1;
inline bool TfCallbackData::_internal_has_op() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.op_ != nullptr);
  return value;
}
inline bool TfCallbackData::has_op() const {
  return _internal_has_op();
}
inline const ::tensorflow::NodeDef& TfCallbackData::_internal_op() const {
  const ::tensorflow::NodeDef* p = _impl_.op_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::NodeDef&>(
      ::tensorflow::_NodeDef_default_instance_);
}
inline const ::tensorflow::NodeDef& TfCallbackData::op() const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.op)
  return _internal_op();
}
inline void TfCallbackData::unsafe_arena_set_allocated_op(
    ::tensorflow::NodeDef* op) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.op_);
  }
  _impl_.op_ = op;
  if (op) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TfCallbackData.op)
}
inline ::tensorflow::NodeDef* TfCallbackData::release_op() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::NodeDef* temp = _impl_.op_;
  _impl_.op_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::NodeDef* TfCallbackData::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_release:tensorflow.TfCallbackData.op)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tensorflow::NodeDef* temp = _impl_.op_;
  _impl_.op_ = nullptr;
  return temp;
}
inline ::tensorflow::NodeDef* TfCallbackData::_internal_mutable_op() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.op_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::NodeDef>(GetArenaForAllocation());
    _impl_.op_ = p;
  }
  return _impl_.op_;
}
inline ::tensorflow::NodeDef* TfCallbackData::mutable_op() {
  ::tensorflow::NodeDef* _msg = _internal_mutable_op();
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.op)
  return _msg;
}
inline void TfCallbackData::set_allocated_op(::tensorflow::NodeDef* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.op_);
  }
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op));
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.op_ = op;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TfCallbackData.op)
}

// repeated .tensorflow.TfCallbackData.InputBufferDescription inputs = 2;
inline int TfCallbackData::_internal_inputs_size() const {
  return _impl_.inputs_.size();
}
inline int TfCallbackData::inputs_size() const {
  return _internal_inputs_size();
}
inline void TfCallbackData::clear_inputs() {
  _impl_.inputs_.Clear();
}
inline ::tensorflow::TfCallbackData_InputBufferDescription* TfCallbackData::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.inputs)
  return _impl_.inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_InputBufferDescription >*
TfCallbackData::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TfCallbackData.inputs)
  return &_impl_.inputs_;
}
inline const ::tensorflow::TfCallbackData_InputBufferDescription& TfCallbackData::_internal_inputs(int index) const {
  return _impl_.inputs_.Get(index);
}
inline const ::tensorflow::TfCallbackData_InputBufferDescription& TfCallbackData::inputs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.inputs)
  return _internal_inputs(index);
}
inline ::tensorflow::TfCallbackData_InputBufferDescription* TfCallbackData::_internal_add_inputs() {
  return _impl_.inputs_.Add();
}
inline ::tensorflow::TfCallbackData_InputBufferDescription* TfCallbackData::add_inputs() {
  ::tensorflow::TfCallbackData_InputBufferDescription* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:tensorflow.TfCallbackData.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_InputBufferDescription >&
TfCallbackData::inputs() const {
  // @@protoc_insertion_point(field_list:tensorflow.TfCallbackData.inputs)
  return _impl_.inputs_;
}

// repeated .tensorflow.TfCallbackData.OutputBufferDescription outputs = 3;
inline int TfCallbackData::_internal_outputs_size() const {
  return _impl_.outputs_.size();
}
inline int TfCallbackData::outputs_size() const {
  return _internal_outputs_size();
}
inline void TfCallbackData::clear_outputs() {
  _impl_.outputs_.Clear();
}
inline ::tensorflow::TfCallbackData_OutputBufferDescription* TfCallbackData::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TfCallbackData.outputs)
  return _impl_.outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_OutputBufferDescription >*
TfCallbackData::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TfCallbackData.outputs)
  return &_impl_.outputs_;
}
inline const ::tensorflow::TfCallbackData_OutputBufferDescription& TfCallbackData::_internal_outputs(int index) const {
  return _impl_.outputs_.Get(index);
}
inline const ::tensorflow::TfCallbackData_OutputBufferDescription& TfCallbackData::outputs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TfCallbackData.outputs)
  return _internal_outputs(index);
}
inline ::tensorflow::TfCallbackData_OutputBufferDescription* TfCallbackData::_internal_add_outputs() {
  return _impl_.outputs_.Add();
}
inline ::tensorflow::TfCallbackData_OutputBufferDescription* TfCallbackData::add_outputs() {
  ::tensorflow::TfCallbackData_OutputBufferDescription* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:tensorflow.TfCallbackData.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TfCallbackData_OutputBufferDescription >&
TfCallbackData::outputs() const {
  // @@protoc_insertion_point(field_list:tensorflow.TfCallbackData.outputs)
  return _impl_.outputs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2ftf2xla_2fkernels_2fcallback_2eproto
