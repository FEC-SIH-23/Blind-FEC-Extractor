// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/util/autotune_maps/conv_parameters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2futil_2fautotune_5fmaps_2fconv_5fparameters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2futil_2fautotune_5fmaps_2fconv_5fparameters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/types.pb.h"
#include "tsl/protobuf/dnn.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2futil_2fautotune_5fmaps_2fconv_5fparameters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2futil_2fautotune_5fmaps_2fconv_5fparameters_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2futil_2fautotune_5fmaps_2fconv_5fparameters_2eproto;
namespace tensorflow {
class ConvParametersProto;
struct ConvParametersProtoDefaultTypeInternal;
extern ConvParametersProtoDefaultTypeInternal _ConvParametersProto_default_instance_;
class ConvParametersProto_Fusion;
struct ConvParametersProto_FusionDefaultTypeInternal;
extern ConvParametersProto_FusionDefaultTypeInternal _ConvParametersProto_Fusion_default_instance_;
class MatmulParametersProto;
struct MatmulParametersProtoDefaultTypeInternal;
extern MatmulParametersProtoDefaultTypeInternal _MatmulParametersProto_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::ConvParametersProto* Arena::CreateMaybeMessage<::tensorflow::ConvParametersProto>(Arena*);
template<> ::tensorflow::ConvParametersProto_Fusion* Arena::CreateMaybeMessage<::tensorflow::ConvParametersProto_Fusion>(Arena*);
template<> ::tensorflow::MatmulParametersProto* Arena::CreateMaybeMessage<::tensorflow::MatmulParametersProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

// ===================================================================

class ConvParametersProto_Fusion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.ConvParametersProto.Fusion) */ {
 public:
  inline ConvParametersProto_Fusion() : ConvParametersProto_Fusion(nullptr) {}
  ~ConvParametersProto_Fusion() override;
  explicit PROTOBUF_CONSTEXPR ConvParametersProto_Fusion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConvParametersProto_Fusion(const ConvParametersProto_Fusion& from);
  ConvParametersProto_Fusion(ConvParametersProto_Fusion&& from) noexcept
    : ConvParametersProto_Fusion() {
    *this = ::std::move(from);
  }

  inline ConvParametersProto_Fusion& operator=(const ConvParametersProto_Fusion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvParametersProto_Fusion& operator=(ConvParametersProto_Fusion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConvParametersProto_Fusion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConvParametersProto_Fusion* internal_default_instance() {
    return reinterpret_cast<const ConvParametersProto_Fusion*>(
               &_ConvParametersProto_Fusion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConvParametersProto_Fusion& a, ConvParametersProto_Fusion& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvParametersProto_Fusion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvParametersProto_Fusion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConvParametersProto_Fusion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConvParametersProto_Fusion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConvParametersProto_Fusion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConvParametersProto_Fusion& from) {
    ConvParametersProto_Fusion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvParametersProto_Fusion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.ConvParametersProto.Fusion";
  }
  protected:
  explicit ConvParametersProto_Fusion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsContribFieldNumber = 1,
    kActivationModeFieldNumber = 2,
    kConvScaleFieldNumber = 3,
    kSideInputScaleFieldNumber = 4,
  };
  // bool is_contrib = 1;
  void clear_is_contrib();
  bool is_contrib() const;
  void set_is_contrib(bool value);
  private:
  bool _internal_is_contrib() const;
  void _internal_set_is_contrib(bool value);
  public:

  // .stream_executor.dnn.ActivationMode activation_mode = 2;
  void clear_activation_mode();
  ::stream_executor::dnn::ActivationMode activation_mode() const;
  void set_activation_mode(::stream_executor::dnn::ActivationMode value);
  private:
  ::stream_executor::dnn::ActivationMode _internal_activation_mode() const;
  void _internal_set_activation_mode(::stream_executor::dnn::ActivationMode value);
  public:

  // double conv_scale = 3;
  void clear_conv_scale();
  double conv_scale() const;
  void set_conv_scale(double value);
  private:
  double _internal_conv_scale() const;
  void _internal_set_conv_scale(double value);
  public:

  // double side_input_scale = 4;
  void clear_side_input_scale();
  double side_input_scale() const;
  void set_side_input_scale(double value);
  private:
  double _internal_side_input_scale() const;
  void _internal_set_side_input_scale(double value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.ConvParametersProto.Fusion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool is_contrib_;
    int activation_mode_;
    double conv_scale_;
    double side_input_scale_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2futil_2fautotune_5fmaps_2fconv_5fparameters_2eproto;
};
// -------------------------------------------------------------------

class ConvParametersProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.ConvParametersProto) */ {
 public:
  inline ConvParametersProto() : ConvParametersProto(nullptr) {}
  ~ConvParametersProto() override;
  explicit PROTOBUF_CONSTEXPR ConvParametersProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConvParametersProto(const ConvParametersProto& from);
  ConvParametersProto(ConvParametersProto&& from) noexcept
    : ConvParametersProto() {
    *this = ::std::move(from);
  }

  inline ConvParametersProto& operator=(const ConvParametersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvParametersProto& operator=(ConvParametersProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConvParametersProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConvParametersProto* internal_default_instance() {
    return reinterpret_cast<const ConvParametersProto*>(
               &_ConvParametersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConvParametersProto& a, ConvParametersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvParametersProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvParametersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConvParametersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConvParametersProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConvParametersProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConvParametersProto& from) {
    ConvParametersProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvParametersProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.ConvParametersProto";
  }
  protected:
  explicit ConvParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConvParametersProto_Fusion Fusion;

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 4,
    kFilterFieldNumber = 6,
    kDilationFieldNumber = 7,
    kStrideFieldNumber = 8,
    kPaddingFieldNumber = 9,
    kDeviceIdentifierFieldNumber = 12,
    kFusionFieldNumber = 13,
    kBatchFieldNumber = 1,
    kInDepthsFieldNumber = 2,
    kOutDepthsFieldNumber = 3,
    kDataFormatFieldNumber = 5,
    kDtypeFieldNumber = 10,
    kGroupCountFieldNumber = 11,
    kVersionFieldNumber = 14,
  };
  // repeated int64 in = 4;
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  int64_t _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_in() const;
  void _internal_add_in(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_in();
  public:
  int64_t in(int index) const;
  void set_in(int index, int64_t value);
  void add_in(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_in();

  // repeated int64 filter = 6;
  int filter_size() const;
  private:
  int _internal_filter_size() const;
  public:
  void clear_filter();
  private:
  int64_t _internal_filter(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_filter() const;
  void _internal_add_filter(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_filter();
  public:
  int64_t filter(int index) const;
  void set_filter(int index, int64_t value);
  void add_filter(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_filter();

  // repeated int64 dilation = 7;
  int dilation_size() const;
  private:
  int _internal_dilation_size() const;
  public:
  void clear_dilation();
  private:
  int64_t _internal_dilation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_dilation() const;
  void _internal_add_dilation(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_dilation();
  public:
  int64_t dilation(int index) const;
  void set_dilation(int index, int64_t value);
  void add_dilation(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      dilation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_dilation();

  // repeated int64 stride = 8;
  int stride_size() const;
  private:
  int _internal_stride_size() const;
  public:
  void clear_stride();
  private:
  int64_t _internal_stride(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_stride() const;
  void _internal_add_stride(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_stride();
  public:
  int64_t stride(int index) const;
  void set_stride(int index, int64_t value);
  void add_stride(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      stride() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_stride();

  // repeated int64 padding = 9;
  int padding_size() const;
  private:
  int _internal_padding_size() const;
  public:
  void clear_padding();
  private:
  int64_t _internal_padding(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_padding() const;
  void _internal_add_padding(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_padding();
  public:
  int64_t padding(int index) const;
  void set_padding(int index, int64_t value);
  void add_padding(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      padding() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_padding();

  // string device_identifier = 12;
  void clear_device_identifier();
  const std::string& device_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_identifier();
  PROTOBUF_NODISCARD std::string* release_device_identifier();
  void set_allocated_device_identifier(std::string* device_identifier);
  private:
  const std::string& _internal_device_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_identifier(const std::string& value);
  std::string* _internal_mutable_device_identifier();
  public:

  // .tensorflow.ConvParametersProto.Fusion fusion = 13;
  bool has_fusion() const;
  private:
  bool _internal_has_fusion() const;
  public:
  void clear_fusion();
  const ::tensorflow::ConvParametersProto_Fusion& fusion() const;
  PROTOBUF_NODISCARD ::tensorflow::ConvParametersProto_Fusion* release_fusion();
  ::tensorflow::ConvParametersProto_Fusion* mutable_fusion();
  void set_allocated_fusion(::tensorflow::ConvParametersProto_Fusion* fusion);
  private:
  const ::tensorflow::ConvParametersProto_Fusion& _internal_fusion() const;
  ::tensorflow::ConvParametersProto_Fusion* _internal_mutable_fusion();
  public:
  void unsafe_arena_set_allocated_fusion(
      ::tensorflow::ConvParametersProto_Fusion* fusion);
  ::tensorflow::ConvParametersProto_Fusion* unsafe_arena_release_fusion();

  // int64 batch = 1;
  void clear_batch();
  int64_t batch() const;
  void set_batch(int64_t value);
  private:
  int64_t _internal_batch() const;
  void _internal_set_batch(int64_t value);
  public:

  // int64 in_depths = 2;
  void clear_in_depths();
  int64_t in_depths() const;
  void set_in_depths(int64_t value);
  private:
  int64_t _internal_in_depths() const;
  void _internal_set_in_depths(int64_t value);
  public:

  // int64 out_depths = 3;
  void clear_out_depths();
  int64_t out_depths() const;
  void set_out_depths(int64_t value);
  private:
  int64_t _internal_out_depths() const;
  void _internal_set_out_depths(int64_t value);
  public:

  // int32 data_format = 5;
  void clear_data_format();
  int32_t data_format() const;
  void set_data_format(int32_t value);
  private:
  int32_t _internal_data_format() const;
  void _internal_set_data_format(int32_t value);
  public:

  // .tensorflow.DataType dtype = 10;
  void clear_dtype();
  ::tensorflow::DataType dtype() const;
  void set_dtype(::tensorflow::DataType value);
  private:
  ::tensorflow::DataType _internal_dtype() const;
  void _internal_set_dtype(::tensorflow::DataType value);
  public:

  // int32 group_count = 11;
  void clear_group_count();
  int32_t group_count() const;
  void set_group_count(int32_t value);
  private:
  int32_t _internal_group_count() const;
  void _internal_set_group_count(int32_t value);
  public:

  // int32 version = 14;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.ConvParametersProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > in_;
    mutable std::atomic<int> _in_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > filter_;
    mutable std::atomic<int> _filter_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > dilation_;
    mutable std::atomic<int> _dilation_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > stride_;
    mutable std::atomic<int> _stride_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > padding_;
    mutable std::atomic<int> _padding_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_identifier_;
    ::tensorflow::ConvParametersProto_Fusion* fusion_;
    int64_t batch_;
    int64_t in_depths_;
    int64_t out_depths_;
    int32_t data_format_;
    int dtype_;
    int32_t group_count_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2futil_2fautotune_5fmaps_2fconv_5fparameters_2eproto;
};
// -------------------------------------------------------------------

class MatmulParametersProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.MatmulParametersProto) */ {
 public:
  inline MatmulParametersProto() : MatmulParametersProto(nullptr) {}
  ~MatmulParametersProto() override;
  explicit PROTOBUF_CONSTEXPR MatmulParametersProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatmulParametersProto(const MatmulParametersProto& from);
  MatmulParametersProto(MatmulParametersProto&& from) noexcept
    : MatmulParametersProto() {
    *this = ::std::move(from);
  }

  inline MatmulParametersProto& operator=(const MatmulParametersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatmulParametersProto& operator=(MatmulParametersProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatmulParametersProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatmulParametersProto* internal_default_instance() {
    return reinterpret_cast<const MatmulParametersProto*>(
               &_MatmulParametersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MatmulParametersProto& a, MatmulParametersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MatmulParametersProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatmulParametersProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatmulParametersProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatmulParametersProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatmulParametersProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatmulParametersProto& from) {
    MatmulParametersProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatmulParametersProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.MatmulParametersProto";
  }
  protected:
  explicit MatmulParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdentifierFieldNumber = 12,
    kAbDtypeFieldNumber = 1,
    kCDtypeFieldNumber = 2,
    kMFieldNumber = 5,
    kNFieldNumber = 6,
    kTransAFieldNumber = 3,
    kTransBFieldNumber = 4,
    kActivationModeFieldNumber = 11,
    kKFieldNumber = 7,
    kLdaFieldNumber = 8,
    kLdbFieldNumber = 9,
    kLdcFieldNumber = 10,
    kVersionFieldNumber = 14,
  };
  // string device_identifier = 12;
  void clear_device_identifier();
  const std::string& device_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_identifier();
  PROTOBUF_NODISCARD std::string* release_device_identifier();
  void set_allocated_device_identifier(std::string* device_identifier);
  private:
  const std::string& _internal_device_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_identifier(const std::string& value);
  std::string* _internal_mutable_device_identifier();
  public:

  // .tensorflow.DataType ab_dtype = 1;
  void clear_ab_dtype();
  ::tensorflow::DataType ab_dtype() const;
  void set_ab_dtype(::tensorflow::DataType value);
  private:
  ::tensorflow::DataType _internal_ab_dtype() const;
  void _internal_set_ab_dtype(::tensorflow::DataType value);
  public:

  // .tensorflow.DataType c_dtype = 2;
  void clear_c_dtype();
  ::tensorflow::DataType c_dtype() const;
  void set_c_dtype(::tensorflow::DataType value);
  private:
  ::tensorflow::DataType _internal_c_dtype() const;
  void _internal_set_c_dtype(::tensorflow::DataType value);
  public:

  // uint64 m = 5;
  void clear_m();
  uint64_t m() const;
  void set_m(uint64_t value);
  private:
  uint64_t _internal_m() const;
  void _internal_set_m(uint64_t value);
  public:

  // uint64 n = 6;
  void clear_n();
  uint64_t n() const;
  void set_n(uint64_t value);
  private:
  uint64_t _internal_n() const;
  void _internal_set_n(uint64_t value);
  public:

  // bool trans_a = 3;
  void clear_trans_a();
  bool trans_a() const;
  void set_trans_a(bool value);
  private:
  bool _internal_trans_a() const;
  void _internal_set_trans_a(bool value);
  public:

  // bool trans_b = 4;
  void clear_trans_b();
  bool trans_b() const;
  void set_trans_b(bool value);
  private:
  bool _internal_trans_b() const;
  void _internal_set_trans_b(bool value);
  public:

  // .stream_executor.dnn.ActivationMode activation_mode = 11;
  void clear_activation_mode();
  ::stream_executor::dnn::ActivationMode activation_mode() const;
  void set_activation_mode(::stream_executor::dnn::ActivationMode value);
  private:
  ::stream_executor::dnn::ActivationMode _internal_activation_mode() const;
  void _internal_set_activation_mode(::stream_executor::dnn::ActivationMode value);
  public:

  // uint64 k = 7;
  void clear_k();
  uint64_t k() const;
  void set_k(uint64_t value);
  private:
  uint64_t _internal_k() const;
  void _internal_set_k(uint64_t value);
  public:

  // int64 lda = 8;
  void clear_lda();
  int64_t lda() const;
  void set_lda(int64_t value);
  private:
  int64_t _internal_lda() const;
  void _internal_set_lda(int64_t value);
  public:

  // int64 ldb = 9;
  void clear_ldb();
  int64_t ldb() const;
  void set_ldb(int64_t value);
  private:
  int64_t _internal_ldb() const;
  void _internal_set_ldb(int64_t value);
  public:

  // int64 ldc = 10;
  void clear_ldc();
  int64_t ldc() const;
  void set_ldc(int64_t value);
  private:
  int64_t _internal_ldc() const;
  void _internal_set_ldc(int64_t value);
  public:

  // int32 version = 14;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.MatmulParametersProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_identifier_;
    int ab_dtype_;
    int c_dtype_;
    uint64_t m_;
    uint64_t n_;
    bool trans_a_;
    bool trans_b_;
    int activation_mode_;
    uint64_t k_;
    int64_t lda_;
    int64_t ldb_;
    int64_t ldc_;
    int32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2futil_2fautotune_5fmaps_2fconv_5fparameters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConvParametersProto_Fusion

// bool is_contrib = 1;
inline void ConvParametersProto_Fusion::clear_is_contrib() {
  _impl_.is_contrib_ = false;
}
inline bool ConvParametersProto_Fusion::_internal_is_contrib() const {
  return _impl_.is_contrib_;
}
inline bool ConvParametersProto_Fusion::is_contrib() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.Fusion.is_contrib)
  return _internal_is_contrib();
}
inline void ConvParametersProto_Fusion::_internal_set_is_contrib(bool value) {
  
  _impl_.is_contrib_ = value;
}
inline void ConvParametersProto_Fusion::set_is_contrib(bool value) {
  _internal_set_is_contrib(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.Fusion.is_contrib)
}

// .stream_executor.dnn.ActivationMode activation_mode = 2;
inline void ConvParametersProto_Fusion::clear_activation_mode() {
  _impl_.activation_mode_ = 0;
}
inline ::stream_executor::dnn::ActivationMode ConvParametersProto_Fusion::_internal_activation_mode() const {
  return static_cast< ::stream_executor::dnn::ActivationMode >(_impl_.activation_mode_);
}
inline ::stream_executor::dnn::ActivationMode ConvParametersProto_Fusion::activation_mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.Fusion.activation_mode)
  return _internal_activation_mode();
}
inline void ConvParametersProto_Fusion::_internal_set_activation_mode(::stream_executor::dnn::ActivationMode value) {
  
  _impl_.activation_mode_ = value;
}
inline void ConvParametersProto_Fusion::set_activation_mode(::stream_executor::dnn::ActivationMode value) {
  _internal_set_activation_mode(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.Fusion.activation_mode)
}

// double conv_scale = 3;
inline void ConvParametersProto_Fusion::clear_conv_scale() {
  _impl_.conv_scale_ = 0;
}
inline double ConvParametersProto_Fusion::_internal_conv_scale() const {
  return _impl_.conv_scale_;
}
inline double ConvParametersProto_Fusion::conv_scale() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.Fusion.conv_scale)
  return _internal_conv_scale();
}
inline void ConvParametersProto_Fusion::_internal_set_conv_scale(double value) {
  
  _impl_.conv_scale_ = value;
}
inline void ConvParametersProto_Fusion::set_conv_scale(double value) {
  _internal_set_conv_scale(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.Fusion.conv_scale)
}

// double side_input_scale = 4;
inline void ConvParametersProto_Fusion::clear_side_input_scale() {
  _impl_.side_input_scale_ = 0;
}
inline double ConvParametersProto_Fusion::_internal_side_input_scale() const {
  return _impl_.side_input_scale_;
}
inline double ConvParametersProto_Fusion::side_input_scale() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.Fusion.side_input_scale)
  return _internal_side_input_scale();
}
inline void ConvParametersProto_Fusion::_internal_set_side_input_scale(double value) {
  
  _impl_.side_input_scale_ = value;
}
inline void ConvParametersProto_Fusion::set_side_input_scale(double value) {
  _internal_set_side_input_scale(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.Fusion.side_input_scale)
}

// -------------------------------------------------------------------

// ConvParametersProto

// int64 batch = 1;
inline void ConvParametersProto::clear_batch() {
  _impl_.batch_ = int64_t{0};
}
inline int64_t ConvParametersProto::_internal_batch() const {
  return _impl_.batch_;
}
inline int64_t ConvParametersProto::batch() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.batch)
  return _internal_batch();
}
inline void ConvParametersProto::_internal_set_batch(int64_t value) {
  
  _impl_.batch_ = value;
}
inline void ConvParametersProto::set_batch(int64_t value) {
  _internal_set_batch(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.batch)
}

// int64 in_depths = 2;
inline void ConvParametersProto::clear_in_depths() {
  _impl_.in_depths_ = int64_t{0};
}
inline int64_t ConvParametersProto::_internal_in_depths() const {
  return _impl_.in_depths_;
}
inline int64_t ConvParametersProto::in_depths() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.in_depths)
  return _internal_in_depths();
}
inline void ConvParametersProto::_internal_set_in_depths(int64_t value) {
  
  _impl_.in_depths_ = value;
}
inline void ConvParametersProto::set_in_depths(int64_t value) {
  _internal_set_in_depths(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.in_depths)
}

// int64 out_depths = 3;
inline void ConvParametersProto::clear_out_depths() {
  _impl_.out_depths_ = int64_t{0};
}
inline int64_t ConvParametersProto::_internal_out_depths() const {
  return _impl_.out_depths_;
}
inline int64_t ConvParametersProto::out_depths() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.out_depths)
  return _internal_out_depths();
}
inline void ConvParametersProto::_internal_set_out_depths(int64_t value) {
  
  _impl_.out_depths_ = value;
}
inline void ConvParametersProto::set_out_depths(int64_t value) {
  _internal_set_out_depths(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.out_depths)
}

// repeated int64 in = 4;
inline int ConvParametersProto::_internal_in_size() const {
  return _impl_.in_.size();
}
inline int ConvParametersProto::in_size() const {
  return _internal_in_size();
}
inline void ConvParametersProto::clear_in() {
  _impl_.in_.Clear();
}
inline int64_t ConvParametersProto::_internal_in(int index) const {
  return _impl_.in_.Get(index);
}
inline int64_t ConvParametersProto::in(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.in)
  return _internal_in(index);
}
inline void ConvParametersProto::set_in(int index, int64_t value) {
  _impl_.in_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.in)
}
inline void ConvParametersProto::_internal_add_in(int64_t value) {
  _impl_.in_.Add(value);
}
inline void ConvParametersProto::add_in(int64_t value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:tensorflow.ConvParametersProto.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConvParametersProto::_internal_in() const {
  return _impl_.in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConvParametersProto::in() const {
  // @@protoc_insertion_point(field_list:tensorflow.ConvParametersProto.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConvParametersProto::_internal_mutable_in() {
  return &_impl_.in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConvParametersProto::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ConvParametersProto.in)
  return _internal_mutable_in();
}

// int32 data_format = 5;
inline void ConvParametersProto::clear_data_format() {
  _impl_.data_format_ = 0;
}
inline int32_t ConvParametersProto::_internal_data_format() const {
  return _impl_.data_format_;
}
inline int32_t ConvParametersProto::data_format() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.data_format)
  return _internal_data_format();
}
inline void ConvParametersProto::_internal_set_data_format(int32_t value) {
  
  _impl_.data_format_ = value;
}
inline void ConvParametersProto::set_data_format(int32_t value) {
  _internal_set_data_format(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.data_format)
}

// repeated int64 filter = 6;
inline int ConvParametersProto::_internal_filter_size() const {
  return _impl_.filter_.size();
}
inline int ConvParametersProto::filter_size() const {
  return _internal_filter_size();
}
inline void ConvParametersProto::clear_filter() {
  _impl_.filter_.Clear();
}
inline int64_t ConvParametersProto::_internal_filter(int index) const {
  return _impl_.filter_.Get(index);
}
inline int64_t ConvParametersProto::filter(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.filter)
  return _internal_filter(index);
}
inline void ConvParametersProto::set_filter(int index, int64_t value) {
  _impl_.filter_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.filter)
}
inline void ConvParametersProto::_internal_add_filter(int64_t value) {
  _impl_.filter_.Add(value);
}
inline void ConvParametersProto::add_filter(int64_t value) {
  _internal_add_filter(value);
  // @@protoc_insertion_point(field_add:tensorflow.ConvParametersProto.filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConvParametersProto::_internal_filter() const {
  return _impl_.filter_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConvParametersProto::filter() const {
  // @@protoc_insertion_point(field_list:tensorflow.ConvParametersProto.filter)
  return _internal_filter();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConvParametersProto::_internal_mutable_filter() {
  return &_impl_.filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConvParametersProto::mutable_filter() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ConvParametersProto.filter)
  return _internal_mutable_filter();
}

// repeated int64 dilation = 7;
inline int ConvParametersProto::_internal_dilation_size() const {
  return _impl_.dilation_.size();
}
inline int ConvParametersProto::dilation_size() const {
  return _internal_dilation_size();
}
inline void ConvParametersProto::clear_dilation() {
  _impl_.dilation_.Clear();
}
inline int64_t ConvParametersProto::_internal_dilation(int index) const {
  return _impl_.dilation_.Get(index);
}
inline int64_t ConvParametersProto::dilation(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.dilation)
  return _internal_dilation(index);
}
inline void ConvParametersProto::set_dilation(int index, int64_t value) {
  _impl_.dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.dilation)
}
inline void ConvParametersProto::_internal_add_dilation(int64_t value) {
  _impl_.dilation_.Add(value);
}
inline void ConvParametersProto::add_dilation(int64_t value) {
  _internal_add_dilation(value);
  // @@protoc_insertion_point(field_add:tensorflow.ConvParametersProto.dilation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConvParametersProto::_internal_dilation() const {
  return _impl_.dilation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConvParametersProto::dilation() const {
  // @@protoc_insertion_point(field_list:tensorflow.ConvParametersProto.dilation)
  return _internal_dilation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConvParametersProto::_internal_mutable_dilation() {
  return &_impl_.dilation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConvParametersProto::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ConvParametersProto.dilation)
  return _internal_mutable_dilation();
}

// repeated int64 stride = 8;
inline int ConvParametersProto::_internal_stride_size() const {
  return _impl_.stride_.size();
}
inline int ConvParametersProto::stride_size() const {
  return _internal_stride_size();
}
inline void ConvParametersProto::clear_stride() {
  _impl_.stride_.Clear();
}
inline int64_t ConvParametersProto::_internal_stride(int index) const {
  return _impl_.stride_.Get(index);
}
inline int64_t ConvParametersProto::stride(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.stride)
  return _internal_stride(index);
}
inline void ConvParametersProto::set_stride(int index, int64_t value) {
  _impl_.stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.stride)
}
inline void ConvParametersProto::_internal_add_stride(int64_t value) {
  _impl_.stride_.Add(value);
}
inline void ConvParametersProto::add_stride(int64_t value) {
  _internal_add_stride(value);
  // @@protoc_insertion_point(field_add:tensorflow.ConvParametersProto.stride)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConvParametersProto::_internal_stride() const {
  return _impl_.stride_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConvParametersProto::stride() const {
  // @@protoc_insertion_point(field_list:tensorflow.ConvParametersProto.stride)
  return _internal_stride();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConvParametersProto::_internal_mutable_stride() {
  return &_impl_.stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConvParametersProto::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ConvParametersProto.stride)
  return _internal_mutable_stride();
}

// repeated int64 padding = 9;
inline int ConvParametersProto::_internal_padding_size() const {
  return _impl_.padding_.size();
}
inline int ConvParametersProto::padding_size() const {
  return _internal_padding_size();
}
inline void ConvParametersProto::clear_padding() {
  _impl_.padding_.Clear();
}
inline int64_t ConvParametersProto::_internal_padding(int index) const {
  return _impl_.padding_.Get(index);
}
inline int64_t ConvParametersProto::padding(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.padding)
  return _internal_padding(index);
}
inline void ConvParametersProto::set_padding(int index, int64_t value) {
  _impl_.padding_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.padding)
}
inline void ConvParametersProto::_internal_add_padding(int64_t value) {
  _impl_.padding_.Add(value);
}
inline void ConvParametersProto::add_padding(int64_t value) {
  _internal_add_padding(value);
  // @@protoc_insertion_point(field_add:tensorflow.ConvParametersProto.padding)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConvParametersProto::_internal_padding() const {
  return _impl_.padding_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
ConvParametersProto::padding() const {
  // @@protoc_insertion_point(field_list:tensorflow.ConvParametersProto.padding)
  return _internal_padding();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConvParametersProto::_internal_mutable_padding() {
  return &_impl_.padding_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
ConvParametersProto::mutable_padding() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.ConvParametersProto.padding)
  return _internal_mutable_padding();
}

// .tensorflow.DataType dtype = 10;
inline void ConvParametersProto::clear_dtype() {
  _impl_.dtype_ = 0;
}
inline ::tensorflow::DataType ConvParametersProto::_internal_dtype() const {
  return static_cast< ::tensorflow::DataType >(_impl_.dtype_);
}
inline ::tensorflow::DataType ConvParametersProto::dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.dtype)
  return _internal_dtype();
}
inline void ConvParametersProto::_internal_set_dtype(::tensorflow::DataType value) {
  
  _impl_.dtype_ = value;
}
inline void ConvParametersProto::set_dtype(::tensorflow::DataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.dtype)
}

// int32 group_count = 11;
inline void ConvParametersProto::clear_group_count() {
  _impl_.group_count_ = 0;
}
inline int32_t ConvParametersProto::_internal_group_count() const {
  return _impl_.group_count_;
}
inline int32_t ConvParametersProto::group_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.group_count)
  return _internal_group_count();
}
inline void ConvParametersProto::_internal_set_group_count(int32_t value) {
  
  _impl_.group_count_ = value;
}
inline void ConvParametersProto::set_group_count(int32_t value) {
  _internal_set_group_count(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.group_count)
}

// string device_identifier = 12;
inline void ConvParametersProto::clear_device_identifier() {
  _impl_.device_identifier_.ClearToEmpty();
}
inline const std::string& ConvParametersProto::device_identifier() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.device_identifier)
  return _internal_device_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConvParametersProto::set_device_identifier(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.device_identifier)
}
inline std::string* ConvParametersProto::mutable_device_identifier() {
  std::string* _s = _internal_mutable_device_identifier();
  // @@protoc_insertion_point(field_mutable:tensorflow.ConvParametersProto.device_identifier)
  return _s;
}
inline const std::string& ConvParametersProto::_internal_device_identifier() const {
  return _impl_.device_identifier_.Get();
}
inline void ConvParametersProto::_internal_set_device_identifier(const std::string& value) {
  
  _impl_.device_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* ConvParametersProto::_internal_mutable_device_identifier() {
  
  return _impl_.device_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* ConvParametersProto::release_device_identifier() {
  // @@protoc_insertion_point(field_release:tensorflow.ConvParametersProto.device_identifier)
  return _impl_.device_identifier_.Release();
}
inline void ConvParametersProto::set_allocated_device_identifier(std::string* device_identifier) {
  if (device_identifier != nullptr) {
    
  } else {
    
  }
  _impl_.device_identifier_.SetAllocated(device_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_identifier_.IsDefault()) {
    _impl_.device_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConvParametersProto.device_identifier)
}

// .tensorflow.ConvParametersProto.Fusion fusion = 13;
inline bool ConvParametersProto::_internal_has_fusion() const {
  return this != internal_default_instance() && _impl_.fusion_ != nullptr;
}
inline bool ConvParametersProto::has_fusion() const {
  return _internal_has_fusion();
}
inline void ConvParametersProto::clear_fusion() {
  if (GetArenaForAllocation() == nullptr && _impl_.fusion_ != nullptr) {
    delete _impl_.fusion_;
  }
  _impl_.fusion_ = nullptr;
}
inline const ::tensorflow::ConvParametersProto_Fusion& ConvParametersProto::_internal_fusion() const {
  const ::tensorflow::ConvParametersProto_Fusion* p = _impl_.fusion_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::ConvParametersProto_Fusion&>(
      ::tensorflow::_ConvParametersProto_Fusion_default_instance_);
}
inline const ::tensorflow::ConvParametersProto_Fusion& ConvParametersProto::fusion() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.fusion)
  return _internal_fusion();
}
inline void ConvParametersProto::unsafe_arena_set_allocated_fusion(
    ::tensorflow::ConvParametersProto_Fusion* fusion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fusion_);
  }
  _impl_.fusion_ = fusion;
  if (fusion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.ConvParametersProto.fusion)
}
inline ::tensorflow::ConvParametersProto_Fusion* ConvParametersProto::release_fusion() {
  
  ::tensorflow::ConvParametersProto_Fusion* temp = _impl_.fusion_;
  _impl_.fusion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::ConvParametersProto_Fusion* ConvParametersProto::unsafe_arena_release_fusion() {
  // @@protoc_insertion_point(field_release:tensorflow.ConvParametersProto.fusion)
  
  ::tensorflow::ConvParametersProto_Fusion* temp = _impl_.fusion_;
  _impl_.fusion_ = nullptr;
  return temp;
}
inline ::tensorflow::ConvParametersProto_Fusion* ConvParametersProto::_internal_mutable_fusion() {
  
  if (_impl_.fusion_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::ConvParametersProto_Fusion>(GetArenaForAllocation());
    _impl_.fusion_ = p;
  }
  return _impl_.fusion_;
}
inline ::tensorflow::ConvParametersProto_Fusion* ConvParametersProto::mutable_fusion() {
  ::tensorflow::ConvParametersProto_Fusion* _msg = _internal_mutable_fusion();
  // @@protoc_insertion_point(field_mutable:tensorflow.ConvParametersProto.fusion)
  return _msg;
}
inline void ConvParametersProto::set_allocated_fusion(::tensorflow::ConvParametersProto_Fusion* fusion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fusion_;
  }
  if (fusion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fusion);
    if (message_arena != submessage_arena) {
      fusion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fusion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fusion_ = fusion;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ConvParametersProto.fusion)
}

// int32 version = 14;
inline void ConvParametersProto::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t ConvParametersProto::_internal_version() const {
  return _impl_.version_;
}
inline int32_t ConvParametersProto::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.ConvParametersProto.version)
  return _internal_version();
}
inline void ConvParametersProto::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void ConvParametersProto::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:tensorflow.ConvParametersProto.version)
}

// -------------------------------------------------------------------

// MatmulParametersProto

// .tensorflow.DataType ab_dtype = 1;
inline void MatmulParametersProto::clear_ab_dtype() {
  _impl_.ab_dtype_ = 0;
}
inline ::tensorflow::DataType MatmulParametersProto::_internal_ab_dtype() const {
  return static_cast< ::tensorflow::DataType >(_impl_.ab_dtype_);
}
inline ::tensorflow::DataType MatmulParametersProto::ab_dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.ab_dtype)
  return _internal_ab_dtype();
}
inline void MatmulParametersProto::_internal_set_ab_dtype(::tensorflow::DataType value) {
  
  _impl_.ab_dtype_ = value;
}
inline void MatmulParametersProto::set_ab_dtype(::tensorflow::DataType value) {
  _internal_set_ab_dtype(value);
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.ab_dtype)
}

// .tensorflow.DataType c_dtype = 2;
inline void MatmulParametersProto::clear_c_dtype() {
  _impl_.c_dtype_ = 0;
}
inline ::tensorflow::DataType MatmulParametersProto::_internal_c_dtype() const {
  return static_cast< ::tensorflow::DataType >(_impl_.c_dtype_);
}
inline ::tensorflow::DataType MatmulParametersProto::c_dtype() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.c_dtype)
  return _internal_c_dtype();
}
inline void MatmulParametersProto::_internal_set_c_dtype(::tensorflow::DataType value) {
  
  _impl_.c_dtype_ = value;
}
inline void MatmulParametersProto::set_c_dtype(::tensorflow::DataType value) {
  _internal_set_c_dtype(value);
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.c_dtype)
}

// bool trans_a = 3;
inline void MatmulParametersProto::clear_trans_a() {
  _impl_.trans_a_ = false;
}
inline bool MatmulParametersProto::_internal_trans_a() const {
  return _impl_.trans_a_;
}
inline bool MatmulParametersProto::trans_a() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.trans_a)
  return _internal_trans_a();
}
inline void MatmulParametersProto::_internal_set_trans_a(bool value) {
  
  _impl_.trans_a_ = value;
}
inline void MatmulParametersProto::set_trans_a(bool value) {
  _internal_set_trans_a(value);
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.trans_a)
}

// bool trans_b = 4;
inline void MatmulParametersProto::clear_trans_b() {
  _impl_.trans_b_ = false;
}
inline bool MatmulParametersProto::_internal_trans_b() const {
  return _impl_.trans_b_;
}
inline bool MatmulParametersProto::trans_b() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.trans_b)
  return _internal_trans_b();
}
inline void MatmulParametersProto::_internal_set_trans_b(bool value) {
  
  _impl_.trans_b_ = value;
}
inline void MatmulParametersProto::set_trans_b(bool value) {
  _internal_set_trans_b(value);
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.trans_b)
}

// uint64 m = 5;
inline void MatmulParametersProto::clear_m() {
  _impl_.m_ = uint64_t{0u};
}
inline uint64_t MatmulParametersProto::_internal_m() const {
  return _impl_.m_;
}
inline uint64_t MatmulParametersProto::m() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.m)
  return _internal_m();
}
inline void MatmulParametersProto::_internal_set_m(uint64_t value) {
  
  _impl_.m_ = value;
}
inline void MatmulParametersProto::set_m(uint64_t value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.m)
}

// uint64 n = 6;
inline void MatmulParametersProto::clear_n() {
  _impl_.n_ = uint64_t{0u};
}
inline uint64_t MatmulParametersProto::_internal_n() const {
  return _impl_.n_;
}
inline uint64_t MatmulParametersProto::n() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.n)
  return _internal_n();
}
inline void MatmulParametersProto::_internal_set_n(uint64_t value) {
  
  _impl_.n_ = value;
}
inline void MatmulParametersProto::set_n(uint64_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.n)
}

// uint64 k = 7;
inline void MatmulParametersProto::clear_k() {
  _impl_.k_ = uint64_t{0u};
}
inline uint64_t MatmulParametersProto::_internal_k() const {
  return _impl_.k_;
}
inline uint64_t MatmulParametersProto::k() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.k)
  return _internal_k();
}
inline void MatmulParametersProto::_internal_set_k(uint64_t value) {
  
  _impl_.k_ = value;
}
inline void MatmulParametersProto::set_k(uint64_t value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.k)
}

// int64 lda = 8;
inline void MatmulParametersProto::clear_lda() {
  _impl_.lda_ = int64_t{0};
}
inline int64_t MatmulParametersProto::_internal_lda() const {
  return _impl_.lda_;
}
inline int64_t MatmulParametersProto::lda() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.lda)
  return _internal_lda();
}
inline void MatmulParametersProto::_internal_set_lda(int64_t value) {
  
  _impl_.lda_ = value;
}
inline void MatmulParametersProto::set_lda(int64_t value) {
  _internal_set_lda(value);
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.lda)
}

// int64 ldb = 9;
inline void MatmulParametersProto::clear_ldb() {
  _impl_.ldb_ = int64_t{0};
}
inline int64_t MatmulParametersProto::_internal_ldb() const {
  return _impl_.ldb_;
}
inline int64_t MatmulParametersProto::ldb() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.ldb)
  return _internal_ldb();
}
inline void MatmulParametersProto::_internal_set_ldb(int64_t value) {
  
  _impl_.ldb_ = value;
}
inline void MatmulParametersProto::set_ldb(int64_t value) {
  _internal_set_ldb(value);
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.ldb)
}

// int64 ldc = 10;
inline void MatmulParametersProto::clear_ldc() {
  _impl_.ldc_ = int64_t{0};
}
inline int64_t MatmulParametersProto::_internal_ldc() const {
  return _impl_.ldc_;
}
inline int64_t MatmulParametersProto::ldc() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.ldc)
  return _internal_ldc();
}
inline void MatmulParametersProto::_internal_set_ldc(int64_t value) {
  
  _impl_.ldc_ = value;
}
inline void MatmulParametersProto::set_ldc(int64_t value) {
  _internal_set_ldc(value);
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.ldc)
}

// .stream_executor.dnn.ActivationMode activation_mode = 11;
inline void MatmulParametersProto::clear_activation_mode() {
  _impl_.activation_mode_ = 0;
}
inline ::stream_executor::dnn::ActivationMode MatmulParametersProto::_internal_activation_mode() const {
  return static_cast< ::stream_executor::dnn::ActivationMode >(_impl_.activation_mode_);
}
inline ::stream_executor::dnn::ActivationMode MatmulParametersProto::activation_mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.activation_mode)
  return _internal_activation_mode();
}
inline void MatmulParametersProto::_internal_set_activation_mode(::stream_executor::dnn::ActivationMode value) {
  
  _impl_.activation_mode_ = value;
}
inline void MatmulParametersProto::set_activation_mode(::stream_executor::dnn::ActivationMode value) {
  _internal_set_activation_mode(value);
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.activation_mode)
}

// string device_identifier = 12;
inline void MatmulParametersProto::clear_device_identifier() {
  _impl_.device_identifier_.ClearToEmpty();
}
inline const std::string& MatmulParametersProto::device_identifier() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.device_identifier)
  return _internal_device_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MatmulParametersProto::set_device_identifier(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.device_identifier)
}
inline std::string* MatmulParametersProto::mutable_device_identifier() {
  std::string* _s = _internal_mutable_device_identifier();
  // @@protoc_insertion_point(field_mutable:tensorflow.MatmulParametersProto.device_identifier)
  return _s;
}
inline const std::string& MatmulParametersProto::_internal_device_identifier() const {
  return _impl_.device_identifier_.Get();
}
inline void MatmulParametersProto::_internal_set_device_identifier(const std::string& value) {
  
  _impl_.device_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* MatmulParametersProto::_internal_mutable_device_identifier() {
  
  return _impl_.device_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* MatmulParametersProto::release_device_identifier() {
  // @@protoc_insertion_point(field_release:tensorflow.MatmulParametersProto.device_identifier)
  return _impl_.device_identifier_.Release();
}
inline void MatmulParametersProto::set_allocated_device_identifier(std::string* device_identifier) {
  if (device_identifier != nullptr) {
    
  } else {
    
  }
  _impl_.device_identifier_.SetAllocated(device_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_identifier_.IsDefault()) {
    _impl_.device_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.MatmulParametersProto.device_identifier)
}

// int32 version = 14;
inline void MatmulParametersProto::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t MatmulParametersProto::_internal_version() const {
  return _impl_.version_;
}
inline int32_t MatmulParametersProto::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.MatmulParametersProto.version)
  return _internal_version();
}
inline void MatmulParametersProto::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void MatmulParametersProto::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:tensorflow.MatmulParametersProto.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2futil_2fautotune_5fmaps_2fconv_5fparameters_2eproto
