/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_LLVMDISCOPE
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// LLVMDIScope
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_LLVMDISCOPE
#undef GEN_PASS_DECL_LLVMDISCOPE
#endif // GEN_PASS_DECL_LLVMDISCOPE
#ifdef GEN_PASS_DEF_LLVMDISCOPE
namespace impl {

template <typename DerivedT>
class LLVMDIScopeBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = LLVMDIScopeBase;

  LLVMDIScopeBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  LLVMDIScopeBase(const LLVMDIScopeBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("enable-line-info");
  }
  ::llvm::StringRef getArgument() const override { return "enable-line-info"; }

  ::llvm::StringRef getDescription() const override { return "Materialize LLVM line info"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LLVMDIScope");
  }
  ::llvm::StringRef getName() const override { return "LLVMDIScope"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LLVMDIScopeBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_LLVMDISCOPE
#endif // GEN_PASS_DEF_LLVMDISCOPE
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// LLVMDIScope Registration
//===----------------------------------------------------------------------===//

inline void registerLLVMDIScope() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createLLVMDIScopePass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerLLVMDIScopePass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createLLVMDIScopePass();
  });
}

//===----------------------------------------------------------------------===//
// TritonLLVMIR Registration
//===----------------------------------------------------------------------===//

inline void registerTritonLLVMIRPasses() {
  registerLLVMDIScope();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class LLVMDIScopeBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = LLVMDIScopeBase;

  LLVMDIScopeBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  LLVMDIScopeBase(const LLVMDIScopeBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("enable-line-info");
  }
  ::llvm::StringRef getArgument() const override { return "enable-line-info"; }

  ::llvm::StringRef getDescription() const override { return "Materialize LLVM line info"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("LLVMDIScope");
  }
  ::llvm::StringRef getName() const override { return "LLVMDIScope"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(LLVMDIScopeBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
